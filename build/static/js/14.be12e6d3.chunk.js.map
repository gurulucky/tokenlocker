{"version":3,"sources":["pages/LockUp.js"],"names":["BorderLinearProgress","styled","LinearProgress","theme","height","borderRadius","linearProgressClasses","colorPrimary","backgroundColor","palette","grey","mode","bar","connect","state","statistics","walletAddress","props","match","params","wallet","token","useWeb3React","account","connector","useState","network","setNetwork","getChainId","then","chainId","Number","Math","round","Date","now","currentTimestamp","setCurrentTimestamp","dispatch","useDispatch","data","useSelector","tokenLists","tokenDataIndex","findIndex","each","address","toLowerCase","tokenData","undefined","useEffect","getData","newData","type","TOKENLISTS","payload","timer","setInterval","console","log","clearInterval","classes","useStyles","pools","mobileClasses","mobile","isMobile","useMediaQuery","fn","val","decimal","isNaN","trimVal","toFixed","decimalVal","toString","replace","withdrawToken","id","a","getProvider","provider","withdraw","status","JSON","parse","stringify","map","eachData","isWithdrawn","LockedEvent","index","event","withdrawDate","timestamp","isWithdrawable","lockedTokenAmount","amount","pow","decimals","getTokenSymbol","symbol","owner","lockedTime","depositEvent","countdownPercent","ceil","container","direction","justifyContent","alignItems","style","borderBottom","fontSize","item","xs","sm","md","textAlign","src","width","alt","toDateString","variant","value","floor","textDecoration","href","explorer","withdrawEvent","transactionHash","target","rel","onClick","lockedLiquidity","isLiquidity","eachLiquidity","token0","token1","locked","totalSupply","push","className","root","maxWidth","info","spacing","color","length","padding"],"mappings":"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","file":"static/js/14.be12e6d3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport {useWeb3React} from '@web3-react/core';\r\nimport { styled } from '@mui/material/styles';\r\n\r\n// ** Import Material UI Components\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Card from '@mui/material/Card';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport Button from \"@mui/material/Button\";\r\nimport Link from \"@mui/material/Link\";\r\n// ** Import Assets\r\nimport useStyles from '../assets/styles';\r\nimport { TOKENLISTS } from \"../redux/constants\";\r\n\r\nimport LinearProgress, { linearProgressClasses } from '@mui/material/LinearProgress';\r\n\r\nimport { getData, withdraw, explorer } from '../web3'\r\n\r\nconst BorderLinearProgress = styled(LinearProgress)(({ theme }) => ({\r\n    height: 10,\r\n    borderRadius: 5,\r\n    [`&.${linearProgressClasses.colorPrimary}`]: {\r\n      backgroundColor: theme.palette.grey[theme.palette.mode === 'light' ? 200 : 800],\r\n    },\r\n    [`& .${linearProgressClasses.bar}`]: {\r\n      borderRadius: 5,\r\n      backgroundColor: theme.palette.mode === 'light' ? '#1a90ff' : '#308fe8',\r\n    },\r\n  }));\r\n\r\nconst LockUp = (props) => {\r\n\r\n    const {wallet, token} = props.match.params;\r\n    const { account, connector } = useWeb3React();\r\n    const [network, setNetwork] = useState(\"\")\r\n\r\n    connector.getChainId().then((chainId) => {\r\n        if (Number(chainId) === 1) setNetwork(\"Ethereum\");\r\n        if (Number(chainId) === 56) setNetwork(\"Binance Smart Chain\");\r\n        if (Number(chainId) === 43114) setNetwork(\"Avalanche\");\r\n        if (Number(chainId) === 43113) setNetwork(\"Avalanche_testnet\");\r\n    });\r\n\r\n    const [currentTimestamp, setCurrentTimestamp] = useState(Math.round(Date.now() / 1000));\r\n    const dispatch = useDispatch();\r\n    const data = useSelector(state => state.tokenLists);\r\n    let tokenDataIndex = data.findIndex(each => each.token.address === token.toLowerCase());\r\n    let tokenData = undefined;\r\n    if (tokenDataIndex !== -1) tokenData = data[tokenDataIndex];\r\n    useEffect(() => {\r\n        if (!wallet) return;\r\n        if (!network) return;\r\n        getData(wallet, network).then(newData => {\r\n            dispatch({type:TOKENLISTS, payload: newData});\r\n        });\r\n        let timer = setInterval(() => {\r\n            getData(wallet, network).then(newData => {\r\n                console.log(newData)\r\n                dispatch({type:TOKENLISTS, payload: newData});\r\n            });\r\n        }, 5000);\r\n        return () => clearInterval(timer);\r\n    }, [wallet, network])\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setCurrentTimestamp(Math.round(Date.now() / 1000));\r\n        }, 1000)\r\n        return () => clearInterval(timer);\r\n    }, [])\r\n\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const isMobile = useMediaQuery('(max-width:600px)');\r\n\r\n    const fn = (val, decimal = 4) => {\r\n        if (!isNaN(Number(val))) {\r\n            const trimVal = Number(Number(val).toFixed(decimal));\r\n            const decimalVal = trimVal.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n            return decimalVal;\r\n        } else {\r\n            return Number(0);\r\n        }\r\n    }\r\n    \r\n    const withdrawToken = async (id) => {\r\n        if (!account) return;\r\n        let provider = await connector.getProvider()\r\n        withdraw(provider, id, account, network).then(async (status) => {\r\n            if (status) console.log(\"withdrawed\");\r\n            const newData = JSON.parse(JSON.stringify(data));\r\n            newData.map(each => {\r\n                each.data.map(eachData => {\r\n                    if (eachData.id === id) eachData.isWithdrawn = true;\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    const LockedEvent = (props) => {\r\n        const { index, event } = props\r\n        const withdrawDate = new Date(event.timestamp * 1000);\r\n        const isWithdrawable = event.timestamp < currentTimestamp;\r\n        const isWithdrawn = event.isWithdrawn;\r\n        const lockedTokenAmount = event.amount/ Math.pow(10, event.decimals)\r\n        const getTokenSymbol = event.symbol;\r\n        const owner = event.owner;\r\n        const lockedTime = new Date(event.depositEvent.timestamp * 1000);\r\n        const countdownPercent = event.timestamp > currentTimestamp ? Math.ceil((event.timestamp - currentTimestamp) / (event.timestamp - event.depositEvent.timestamp) * 100) : 0;\r\n        const getRemainTime = () => {\r\n            if (event.timestamp < currentTimestamp) return `00D-00H-00M-00S`;\r\n            return `${Math.floor((event.timestamp - currentTimestamp) / 86400)}D-${Math.floor(((event.timestamp - currentTimestamp) % 86400) / 3600)}H-${Math.floor(((event.timestamp - currentTimestamp) % 3600) / 60)}M-${(event.timestamp - currentTimestamp) % 60}S`\r\n        }\r\n\r\n        return (\r\n                <Grid \r\n                container\r\n                direction='row'\r\n                justifyContent='space-between'\r\n                alignItems='center'\r\n                style={{borderBottom:'2px solid #e55370', fontSize: '13px'}}\r\n                >\r\n                    <Grid item  xs={2} sm={2} md={1} style={{textAlign:'center'}}>\r\n                        <img src='/lock.png' style={{width:40}} alt='token image' />\r\n                    </Grid>\r\n                    <Grid item  xs={10} sm={10} md={5}>\r\n                        <p>Lock Tokens - {fn(lockedTokenAmount, 2)} {getTokenSymbol}</p>\r\n                        {!isWithdrawable ? <p><span><button>Locked</button></span> Locked {lockedTime.toDateString()} - unlocks {withdrawDate.toDateString()}</p>: \r\n                        (!isWithdrawn ? <p><span><button>Withdrawable</button></span> Locked {lockedTime.toDateString()} - unlocks {withdrawDate.toDateString()}</p>:\r\n                        <p><span><button>Withdrawn</button></span> Locked {lockedTime.toDateString()} - unlocks {withdrawDate.toDateString()}</p>)}\r\n                        <p>Owner: {owner}</p>\r\n                    </Grid>\r\n\r\n                    <Grid item  xs={12} sm={8} md={3} style={{textAlign:'center'}}>\r\n                        <p >UNLOCK COUNTDOWN</p>\r\n                        <BorderLinearProgress variant='determinate' value={countdownPercent} />\r\n                        <p >{getRemainTime()}</p>\r\n                    </Grid>\r\n                    <Grid item  xs={12} sm={4} md={3} style={{textAlign:'center'}}>\r\n                        {!isWithdrawable? <Link style={{textDecoration: 'none'}} href={`${explorer[network]}/tx/${event.depositEvent.transactionHash}`} target='_blank' rel='noreferrer'>VIEW TX</Link>: (\r\n                            !isWithdrawn ? (account && account.toLowerCase() === owner.toLowerCase() ? <Button onClick={() => withdrawToken(event.id)} >WITHDRAW</Button> : <Link style={{textDecoration: 'none'}} href={`${explorer[network]}/tx/${event.depositEvent.transactionHash}`} target='_blank' rel='noreferrer'>VIEW TX</Link>) :\r\n                            <Link style={{textDecoration: 'none'}} href={`${explorer[network]}/tx/${event.withdrawEvent.transactionHash}`} target='_blank' rel='noreferrer'>VIEW TX</Link>\r\n                        )}\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n        )\r\n    }\r\n\r\n    let lockedTokenAmount = 0, lockedLiquidity = [];\r\n    if (tokenData) tokenData.data.map(each => {\r\n        if (!each.isWithdrawn && !each.isLiquidity) lockedTokenAmount += each.amount / Math.pow(10, each.decimals);\r\n        if (!each.isWithdrawn && each.isLiquidity) {\r\n            let index = lockedLiquidity.findIndex(eachLiquidity => eachLiquidity.token0.address === each.token0.address && eachLiquidity.token1.address === each.token1.address);\r\n            if (index !== -1) lockedLiquidity.locked += each.amount * 100 / each.totalSupply;\r\n            else lockedLiquidity.push({ token0: each.token0, token1: each.token1, locked: each.amount * 100 / each.totalSupply });\r\n        }\r\n    })\r\n    return (\r\n        <Container className={classes.root} maxWidth='lg'>\r\n            <Box className={classes.info}>\r\n                <Grid container spacing={3}>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : 'grid'} item xs={12} sm={12} md={12} >\r\n                        <Card className='card'>\r\n                            <CardContent>\r\n                                <Typography className='title' color='textSecondary'>\r\n                                    LockUp Overview\r\n                                </Typography>\r\n                                <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>Liquidity Locked</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        {lockedLiquidity.length ? lockedLiquidity.map((each, index) => (\r\n                                            <span className='value big' color='textSecondary' key={`liquidity-${index}`} style={{ padding: 10  }}>\r\n                                                {`${fn(each.locked, 2)}% ${each.token0.symbol}/${each.token1.symbol}`}\r\n                                            </span>\r\n                                        )) : <span className='value big' color='textSecondary' style={{ padding: 10  }}>\r\n                                            0\r\n                                        </span>}\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>Token Locked</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        {(() => {\r\n                                            if (lockedTokenAmount !== 0) {\r\n                                                return (\r\n                                                    <span className='value big' color='textSecondary' style={isMobile ? { padding: 10 } : { padding: 20 }}>\r\n                                                        {`${fn(lockedTokenAmount, 2)} ${tokenData.token.symbol}`}\r\n                                                    </span>\r\n                                                )\r\n                                            } else {\r\n                                                return <span className='value big' color='textSecondary' style={{ padding: 10  }}>\r\n                                                0\r\n                                            </span>\r\n                                            }\r\n                                        })()}\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid \r\n                                    container\r\n                                    direction='row'\r\n                                    justifyContent='space-between'\r\n                                    alignItems='center'\r\n                                >\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        <span>Total Supply</span>\r\n                                    </Grid>\r\n                                    <Grid item  xs={6} sm={6} md={6} style={{textAlign:'center'}}>\r\n                                        {(() => {\r\n                                            if (tokenData !== undefined) {\r\n                                                return (\r\n                                                    <span className='value big' color='textSecondary' style={isMobile ? { padding: 10 } : { padding: 20 }}>\r\n                                                        {`${fn(tokenData.token.totalSupply / Math.pow(10, tokenData.token.decimals), 2)} ${tokenData.token.symbol}`}\r\n                                                    </span>\r\n                                                )\r\n                                            } else {\r\n                                                return <span className='value big' color='textSecondary' style={{ padding: 10  }}>\r\n                                                0\r\n                                            </span>\r\n                                            }\r\n                                        })()}\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : 'grid'} item xs={12} sm={12} md={12} >\r\n                        <Card className='card'>\r\n                            <CardContent>\r\n                                <Typography className='title' color='textSecondary'>\r\n                                    Lock Events\r\n                                </Typography>\r\n                                {tokenData && tokenData.data.map((each, index) => (\r\n                                    <LockedEvent key={`event-${index}`} index={index} event={each} />\r\n                                ))}\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    \r\n                    \r\n                </Grid>\r\n            </Box>\r\n        </Container >\r\n    )\r\n}\r\n// export default Portfolio\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n    walletAddress: state.walletAddress\r\n})\r\n\r\n//connect function INJECTS dispatch function as a prop!!\r\nexport default connect(mapStateToProps)(LockUp);\r\n"],"sourceRoot":""}