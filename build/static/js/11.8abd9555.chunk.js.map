{"version":3,"sources":["pages/Vesting.js","web3.js","api.js"],"names":["connect","state","statistics","props","React","useState","activeStep","setActiveStep","open","setOpen","snackbar","setSnackbar","network","setNetwork","csvData","setCsvData","isCsvSelected","setIsCsvSelected","undefined","lastDeployedContract","setLastDeployedContract","shortLastDepolyedContract","setShortLastDepolyedContract","selectedContract","setSelectedContract","fileName","setFileName","modalTitle","setModalTitle","modalDes","setModalDes","setIsAllowed","theme","useTheme","classes","useStyles","pools","mobileClasses","mobile","dashboardClasses","dashboard","isMobile","useMediaQuery","token","useSelector","tokenData","dispatch","useDispatch","fileInput","useRef","useWeb3React","account","connector","tokenAddress","values","setValues","processData","dataString","dataStringLines","trim","split","newCsvData","isValid","map","each","splitLine","console","log","newAddress","period","amount","checkWalletAddress","push","address","getLastDeployedContract","then","slice","length","useEffect","a","getTokenBalance","tokenBalance","type","USERBALANCE","payload","allowance","allowanceAmount","handleChange","event","target","value","getTokenMetadata","CHAINDATA","find","item","name","chain","TOKENDATA","handleOpen","handleClose","networkData","subtitle","url","subData","subTitle","chainData","chainId","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","symbol","decimals","deployNewContract","getProvider","provider","deployContract","result","events","prevActiveStep","totalAmount","Number","className","root","maxWidth","style","paddingLeft","paddingRight","info","container","direction","justifyContent","alignItems","marginTop","xs","sm","md","display","textAlign","href","explorer","swapTokenLockerFactory","color","underline","button","variant","wordBreak","cardHeader","title","src","defaultValue","axis","index","onChangeIndex","step","networkSelector","padding","border","borderRadius","onClick","networkImage","alt","networkTitle","networkDes","width","height","backgroundColor","sx","m","htmlFor","id","onChange","endAdornment","position","showPassword","onMouseDown","preventDefault","edge","label","margin","textLeft","tokenImage","tokenTitle","textRight","current","click","ref","e","_filePath","_fileName","file","files","reader","FileReader","onload","evt","bstr","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_csv","header","readAsBinaryString","fileSelect","download","balanceContainer","marginBottom","fontSize","toFixed","mobileStepper","steps","nextButton","size","approveToken","sendTokenVesting","disabled","maxSteps","backButton","onClose","top","left","transform","bgcolor","boxShadow","p","component","mt","autoHideDuration","message","serverApi","deposit","date","unlockDate","Date","UTCTimestamp","Math","round","getTime","web3","Web3","contract","eth","Contract","lockerContractAbi","lockerAddress","methods","feesInETH","call","feeInETH","BigInt","send","from","pow","toString","status","withdraw","approve","erc20Abi","utils","toBN","deployedContract","getData","axios","get","response","lockerDataByWallet","walletAddress","isAddress","lastDeployedAddress","abi","createTokenLocker","_users","_amounts","_lockHours","_sendAmount","sendLockTokenMany","getClaimTokenList","factoryContract","getAllContracts","allContracts","multicall","Multicall","web3Instance","tryAggregate","contractCallContext","reference","contractAddress","calls","methodName","methodParameters","returnData","Object","entries","results","key","callsReturnContext","returnValues","hex","claimedAmount","lockTimestamp","lastUpdated","lockHours","claimToken","tokenDetail","currentTimestamp","floor","now","reason","passedHours","availableAmount","maxTxLimit","airdrop","toChecksumAddress","airdropAddress","apiConfig","headers","serverUrl","_chain","_tokenAddress","tokenMetadata"],"mappings":"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","file":"static/js/11.8abd9555.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {connect, useSelector, useDispatch} from 'react-redux';\r\nimport {useWeb3React} from \"@web3-react/core\";\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport * as XLSX from 'xlsx';\r\n\r\n// ** Import Material UI Components\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nimport Container from \"@mui/material/Container\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport Modal from '@mui/material/Modal';\r\nimport {  RadioGroup } from \"@mui/material\";\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Search from '@mui/icons-material/Search';\r\nimport { Snackbar } from \"@mui/material\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { TextField, Table, TableHead, TableBody, TableRow, TableCell, TableContainer, Paper, Box, IconButton } from \"@mui/material\";\r\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n// import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Link from \"@mui/material/Link\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport { Tooltip } from \"@mui/material\";\r\n\r\nimport useStyles from \"../assets/styles\";\r\n\r\nimport { TOKENDATA, USERBALANCE, TOKENLISTS } from \"../redux/constants\";\r\n\r\nimport {  CHAINDATA } from \"../constants\";\r\nimport { getTokenMetadata } from \"../api\";\r\nimport { allowance, getTokenBalance, checkWalletAddress, getLastDeployedContract, deployContract, approveToken, sendTokenVesting, explorer } from \"../web3\"\r\nimport { swapTokenLockerFactory } from '../constants'\r\n\r\nconst Vesting = (props) => {\r\n\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [snackbar, setSnackbar] = React.useState(false);\r\n    const [network, setNetwork] = useState(\"Avalanche\");\r\n    const [csvData, setCsvData] = useState([]);\r\n    const [isCsvSelected, setIsCsvSelected] = useState(false);\r\n    const [lastDeployedContract, setLastDeployedContract] = useState(undefined);\r\n    const [shortLastDepolyedContract, setShortLastDepolyedContract] = useState(undefined);\r\n    const [selectedContract, setSelectedContract] = useState(undefined);\r\n    const [fileName, setFileName] = useState('');\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalDes, setModalDes] = useState(\"\");\r\n    const [isAllowed, setIsAllowed] = useState(0);// 0: checking, 1: not allowed, 2: allowed\r\n\r\n    const maxSteps = 7;\r\n    const theme = useTheme();\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const dashboardClasses = useStyles.dashboard();\r\n    const isMobile = useMediaQuery(\"(max-width:600px)\");\r\n    const token = useSelector(state => state.tokenData);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    let fileInput = useRef();\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #fff',\r\n        borderRadius:'10px',\r\n        boxShadow: 24,\r\n        p: 4,\r\n    };\r\n\r\n    const { account, connector } = useWeb3React();\r\n\r\n    const [values, setValues] = React.useState({\r\n        tokenAddress:\"\",\r\n    });\r\n\r\n    const selectToken = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n\r\n    const fileSelect = (e) => {\r\n        const _filePath = e.target.value.split('\\\\');\r\n        const _fileName = _filePath[_filePath.length - 1];\r\n        setFileName(_fileName);\r\n        setIsCsvSelected(false);\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            /* Parse data */\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, { type: 'binary' });\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n            processData(data);\r\n        };\r\n        reader.readAsBinaryString(file);\r\n    }\r\n\r\n    const checkPeriod = (period) => {\r\n        return true;\r\n    }\r\n\r\n    const checkAmount = (amount) => {\r\n        return true;\r\n    }\r\n\r\n    const processData = (dataString) => {\r\n        dataString = dataString.trim('\\r\\n|\\n');\r\n        const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n        const newCsvData = [];\r\n        let isValid = true;\r\n        dataStringLines.map(each => {\r\n            each = each.trim();\r\n            const splitLine = each.split(',');\r\n            console.log(splitLine)\r\n            const newAddress = splitLine[0];\r\n            const period = splitLine[1];\r\n            const amount = splitLine[2];\r\n            if (!checkWalletAddress(newAddress, network)) isValid = false;\r\n            if (!checkPeriod(period)) isValid = false;\r\n            if (!checkAmount(amount)) isValid = false;\r\n            newCsvData.push({\r\n                address: newAddress,\r\n                period: period,\r\n                amount: amount\r\n            })\r\n        })\r\n        if (!isValid) {\r\n            console.log(\"invalid\");\r\n            return;\r\n        } else {\r\n            setCsvData(newCsvData);\r\n            getLastDeployedContract(account, network).then(address => {\r\n                setLastDeployedContract(address);\r\n                setShortLastDepolyedContract(`${address.slice(0,9)}...${address.slice(address.length - 7)}`);\r\n            });\r\n            setIsCsvSelected(true);\r\n        }\r\n        // for (let i = 0; i < dataStringLines.length; i++) {\r\n        //     let splitLine = dataString\r\n        //     csvData.push(dataStringLines[i]);\r\n        //     setCsvData(csvData);\r\n        //     // const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\r\n        //     // if (headers && row.length == headers.length) {\r\n        //     //     const obj = {};\r\n        //     //     for (let j = 0; j < headers.length; j++) {\r\n        //     //         let d = row[j];\r\n        //     //         if (d.length > 0) {\r\n        //     //             if (d[0] == '\"')\r\n        //     //             d = d.substring(1, d.length - 1);\r\n        //     //             if (d[d.length - 1] == '\"')\r\n        //     //             d = d.substring(d.length - 2, 1);\r\n        //     //         }\r\n        //     //         if (headers[j]) {\r\n        //     //             obj[headers[j]] = d;\r\n        //     //         }\r\n        //     //     }\r\n        //     //     // remove the blank rows\r\n        //     //     if (Object.values(obj).filter(x => x).length > 0) {\r\n        //     //         list.push(obj);\r\n        //     //     }\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n    const handleNext = () => {\r\n        if (activeStep === 0) {\r\n            if (!account) {\r\n                setModalTitle(\"Please connect Wallet\");\r\n                setModalDes(`Before you can create a lock on ${network}, you must connect your wallet to ${network} network on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                handleOpen();\r\n            }else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } else if (activeStep === 1 ) {\r\n            if (!token.symbol) {\r\n                setModalTitle(\"Please select Token\");\r\n                setModalDes(`Before you can create a lock on ${network}, you must select token on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                handleOpen();\r\n            }else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } else if (activeStep === 2 ) {\r\n            if (!isCsvSelected) {\r\n                setModalTitle(\"Please select csv file\");\r\n                handleOpen();\r\n            } else setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        } else if (activeStep === 3) {\r\n            if (!selectedContract) return;\r\n            else if (selectedContract === 'new') deployNewContract();\r\n            else if (selectedContract === 'last') {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } else if (activeStep === 4) {\r\n            connector.getProvider().then((provider) => {\r\n                approveToken(provider, token.address, account, lastDeployedContract).then((state) => {\r\n                    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                })\r\n            })\r\n        } else if (activeStep === 5) {\r\n            connector.getProvider().then((provider) => {\r\n                sendTokenVesting(provider, lastDeployedContract, csvData, token.address, account, network).then((state) => {\r\n                    setActiveStep(0);\r\n                })\r\n            })\r\n        }\r\n    };\r\n    useEffect(async () => {\r\n        setIsAllowed(0);\r\n        if (!account || !token.address) return;\r\n        const tokenBalance = await getTokenBalance(token, account, network);\r\n        dispatch({type:USERBALANCE, payload: tokenBalance});\r\n        const allowanceAmount = await allowance(token, account, network);\r\n        if (allowanceAmount < 115792089237316195423570985008687907853269984665640564039457584007913129639935) setIsAllowed(1);\r\n        else setIsAllowed(2);\r\n    }, [account, token, connector])\r\n\r\n    const handleChange = async (event) => {\r\n        setValues({ tokenAddress: event.target.value });\r\n        if (event.target.value.length == 42) {\r\n            const address = event.target.value;\r\n            try {\r\n                const tokenData = await getTokenMetadata(CHAINDATA.find((item)=>item.name==network).chain, address);\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: tokenData[0]\r\n                })\r\n            } catch(e) {\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: {}\r\n                })\r\n            }\r\n        }else {\r\n            dispatch({\r\n                type:TOKENDATA,\r\n                payload: {}\r\n            })\r\n        }\r\n    };\r\n    \r\n    const handleClickSearch = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        });\r\n    };\r\n    \r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    \r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    \r\n    const handleStepChange = (step) => {\r\n        setActiveStep(step);\r\n    };\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSnackbarClose = () => setSnackbar(false);\r\n\r\n    const networkData= [\r\n        {name:\"Ethereum\", subtitle:\"Choose if your coin is built on ETH\", url:\"/networks/eth.svg\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0x1', chainName:\"Ethereum\", rpcUrls:[\"https://mainnet.infura.io/v3/\"], blockExplorerUrls:['https://etherscan.io'], nativeCurrency: { symbol:'MATIC', decimals: 18} }},\r\n        {name:\"Binance Smart Chain\", subtitle:\"Choose if your coin is built on BSC\", url:\"/networks/bsc.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular BEP-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0x38', chainName:\"Binance Smart Chain\", rpcUrls:[\"https://bsc-dataseed1.ninicoin.io\"], blockExplorerUrls:['https://bscscan.com/'], nativeCurrency: { symbol:'BNB', decimals: 18} }},\r\n        {name:\"Avalanche\", subtitle:\"Choose if your coin is built on AVAX\", url:\"/networks/avalanche.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0xa86a', chainName:\"Avalanche Mainnet\", rpcUrls:[\"https://api.avax.network/ext/bc/C/rpc\"], blockExplorerUrls:['https://snowtrace.io/'], nativeCurrency: { symbol:'AVAX', decimals: 18} }},\r\n        {name:\"Avalanche_testnet\", subtitle:\"Choose if your coin is built on AVAX\", url:\"/networks/avalanche.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0xa869', chainName:\"Avalanche Testnet\", rpcUrls:[\"https://api.avax-test.network/ext/bc/C/rpc\"], blockExplorerUrls:['https://testnet.snowtrace.io/'], nativeCurrency: { symbol:'AVAX', decimals: 18} }},\r\n    ]\r\n\r\n    const changeNetwork = (name) => {\r\n        setNetwork(name);\r\n        dispatch({\r\n            type:TOKENDATA,\r\n            payload: {}\r\n        })\r\n    }\r\n\r\n    const deployNewContract = async () => {\r\n        let provider = await connector.getProvider()\r\n        deployContract(provider, account, token.address, network).then(result => {\r\n            const newAddress = result.events[0].address;\r\n            setLastDeployedContract(newAddress);\r\n            setShortLastDepolyedContract(`${newAddress.slice(0,9)}...${newAddress.slice(newAddress.length - 7)}`);\r\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        })\r\n    }\r\n    let totalAmount = 0;\r\n    csvData.map(each => {\r\n        totalAmount += Number(each.amount);\r\n    })\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\" style={{paddingLeft:20, paddingRight:20}}>\r\n            <Box className={classes.info}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\" >\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid text-center`  : \"grid text-center\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <div style={{maxWidth:400, display:'inline-block', textAlign:'left'}}>\r\n                            <h1>Create your own token vesting contract.</h1>\r\n                            <p>All coins are locked into our audited smart contract and can only be withdrawn by you after lock time expires.</p>\r\n                            <Link\r\n                                href={`${explorer[network]}/address/${swapTokenLockerFactory[network]}`}\r\n                                target=\"_blank\"\r\n                                color=\"blue\"\r\n                                underline=\"none\"\r\n                                className={classes.button}\r\n                            ><Button variant=\"contained\">Explore Contract</Button></Link>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : \"grid\"} style={{marginTop:40, wordBreak: \"break-all\"}} item xs={12} sm={12} md={6} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Token Vesting\"\r\n                            />\r\n                            <CardContent >\r\n                                <img src=\"/lock.png\" />\r\n                                <RadioGroup\r\n                                    aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                    defaultValue=\"female\"\r\n                                    name=\"radio-buttons-group\"\r\n                                >\r\n                                    <SwipeableViews\r\n                                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                        index={activeStep}\r\n                                        onChangeIndex={handleStepChange}\r\n                                    >\r\n                                       \r\n                                        <div key={1} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Choose the blockchain network.\r\n                                            </p>\r\n                                            {\r\n                                                networkData.map((item)=>\r\n                                                <Grid\r\n                                                    className={classes.networkSelector}\r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-evenly\"\r\n                                                    alignItems=\"center\"\r\n                                                    style={{padding:\"10px 0px\", border:item.name==network?\"1px solid #e55370\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                    key={item.name}\r\n                                                    onClick = {()=>changeNetwork(item.name)}\r\n                                                >\r\n                                                    <Grid item  xs={10} sm={11} md={11}>\r\n                                                        <Grid \r\n                                                            container\r\n                                                            direction=\"row\"\r\n                                                            \r\n                                                            alignItems=\"center\"\r\n                                                        >\r\n                                                            <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                                <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" />\r\n                                                            </Grid>\r\n                                                            <Grid item   xs={9} sm={10} md={10}>\r\n                                                                <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                    {item.name}\r\n                                                                </p>\r\n                                                                <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                    {item.subtitle}\r\n                                                                </p>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                    <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                        {item.name==network ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                        <div key={2} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\" color=\"textSecondary\">\r\n                                                Please insert the token contract address.\r\n                                            </p>\r\n                                            <FormControl sx={{ m: 1, width: '25ch' }} variant=\"outlined\" style={{width:'-webkit-fill-available'}}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-password\">Address</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"outlined-adornment-password\"\r\n                                                    type=\"text\"\r\n                                                    value={values.tokenAddress}\r\n                                                    onChange={handleChange}\r\n                                                    // onKeyDown={handleChange}\r\n                                                    endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                        aria-label=\"toggle search\"\r\n                                                        onClick={handleClickSearch}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                        >\r\n                                                        <Search />\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                    }\r\n                                                    label=\"Password\"\r\n                                                />\r\n                                            </FormControl>\r\n                                            \r\n                                            {\r\n                                                token != undefined && token.symbol !=undefined && token.symbol !=\"\" &&\r\n                                                <div style={{paddingLeft:20, paddingRight:20}}>\r\n                                                    <p style={{margin:\"0px\"}}>Token Found</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <img className={dashboardClasses.tokenImage} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectToken}>Select</Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </div>\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={3} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\">Click the button below to upload a CSV from your device</p>\r\n                                            <div className=\"text-center\">\r\n                                                <Button variant=\"contained\" onClick={()=>fileInput.current.click()}>Upload CSV</Button>\r\n                                                <input \r\n                                                    ref={fileInput} \r\n                                                    type=\"file\" \r\n                                                    style={{ display: 'none' }} \r\n                                                    onChange = {(e)=>fileSelect(e)}\r\n                                                />\r\n                                            </div>\r\n                                            { fileName ? <div className=\"text-center\" style={{margin:\"10px\"}}>\r\n                                                {fileName}\r\n                                            </div> :\r\n                                            <div className=\"text-center\" style={{margin:\"10px\"}}>\r\n                                                <a  href=\"/Sample.csv\" style={{color:\"#e55370\"}} download>Click here to download sample CSV</a>\r\n                                            </div>}\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={4} sm={4} md={4}>\r\n                                                   <p style={{margin:0}}>Address</p>\r\n                                                </Grid>\r\n                                                <Grid item className=\"text-center\"  xs={4} sm={4} md={4}>\r\n                                                    <p style={{margin:0}}>Period</p>\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textRight}  xs={4} sm={4} md={4}>\r\n                                                    <p style={{margin:0}}>Amount</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <p style={{color:\"#e55370\", marginTop:20, marginBottom:0}}>Available Periods</p>\r\n                                            <p style={{margin:0}}>M - months</p>\r\n                                            <p style={{margin:0}}>W - weeks</p>\r\n                                            <p style={{margin:0}}>D - days</p>\r\n                                            <p style={{margin:0}}>H - hours</p>\r\n                                            \r\n                                        </div>\r\n                                        <div key={4} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                            >\r\n                                                {lastDeployedContract && <>\r\n                                                    <Grid item xs={12} sm={12} md={12}>\r\n                                                        <p className=\"text-center\">Your last deployed address: <Link href={`${explorer[network]}/address/${lastDeployedContract}`} target='_blank'>{shortLastDepolyedContract}</Link></p>\r\n                                                    </Grid>\r\n                                                </>}\r\n                                                {lastDeployedContract && <Grid item xs={12} sm={12} md={12}>\r\n                                                    <p className=\"text-center\">Choose between a new vesting and an existing contract.</p>\r\n                                                    <p className=\"text-center\">The Vesting happends hourly</p>\r\n                                                </Grid>}\r\n                                            </Grid>\r\n                                            <Grid\r\n                                                className={classes.networkSelector}\r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-evenly\"\r\n                                                alignItems=\"center\"\r\n                                                style={{padding:\"10px 0px\", border: \"1px solid #e55370\", borderRadius:'5px', marginBottom:5}}\r\n                                                onClick = {()=>setSelectedContract('new')}\r\n                                            >\r\n                                                <Grid item container direction=\"row\" alignItems=\"center\" xs={10} sm={11} md={11}>\r\n                                                    <Grid item className=\"text-center\" xs={12} sm={12} md={12}>\r\n                                                        \r\n                                                    </Grid>\r\n                                                    <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                        {/* <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" /> */}\r\n                                                    </Grid>\r\n                                                    <Grid item xs={9} sm={10} md={10}>\r\n                                                        <p   color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                            Deploy New Contract\r\n                                                        </p >\r\n                                                        <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                            Deploy a new token vesting contract\r\n                                                        </p>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                    {selectedContract === 'new' ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            {lastDeployedContract && <Grid\r\n                                                className={classes.networkSelector}\r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-evenly\"\r\n                                                alignItems=\"center\"\r\n                                                style={{padding:\"10px 0px\", border: \"1px solid #e55370\", borderRadius:'5px'}}\r\n                                                onClick = {()=>setSelectedContract('last')}\r\n                                            >\r\n                                                <Grid item xs={10} sm={11} md={11}>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        \r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                            {/* <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" /> */}\r\n                                                        </Grid>\r\n                                                        <Grid item xs={9} sm={10} md={10}>\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                Last Deployed\r\n                                                            </p>\r\n                                                            <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                Use last deployed address\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                    {selectedContract === 'last' ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                </Grid>\r\n                                            </Grid>}\r\n                                        </div>\r\n                                        <div key={5} style={{paddingLeft: 1, paddingRight: 1}}>\r\n                                            <Grid item xs={10} sm={11} md={11}>\r\n                                                {lastDeployedContract ? \r\n                                                <Grid \r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-between\"\r\n                                                    alignItems=\"center\"\r\n                                                >\r\n                                                    <Grid item xs={12}>\r\n                                                        <p className=\"text-center\">Your contract is deployed at: <Link href={`${explorer[network]}/address/${lastDeployedContract}`} target='_blank'>{shortLastDepolyedContract}</Link></p>\r\n                                                    </Grid>\r\n                                                    <Grid item xs={12}>\r\n                                                        <p className=\"text-center\">Click &quot;next&quot; to approve interaction with contract:</p>\r\n                                                    </Grid>\r\n                                                    <Grid item className=\"text-center\" xs={12}>\r\n                                                        {lastDeployedContract}\r\n                                                    </Grid>\r\n                                                </Grid> : <>\r\n                                                </>\r\n                                                }\r\n                                            </Grid>\r\n                                        </div>\r\n                                        <div key={6} style={{paddingLeft: 1, paddingRight: 1}}>\r\n                                            {lastDeployedContract && <>\r\n                                                <p style={{textAlign: 'center'}}>Contract: {lastDeployedContract}</p>\r\n                                                <div style={{border:\"1px solid #e55370\", borderRadius:10, }}>\r\n                                                    <p style={{textAlign: 'center', marginBottom:5}}>Total number of addresses: </p>\r\n                                                    <p style={{textAlign: 'center', marginTop:0, color:\"#e55370\", fontSize:20}}>{csvData.length}</p>\r\n                                                    <p style={{textAlign: 'center', marginBottom:5}}>Total number of transactions needed: </p>\r\n                                                    <p style={{textAlign: 'center', marginTop:0, color:\"#e55370\", fontSize:20}}>1</p>\r\n                                                    <p style={{textAlign: 'center', marginBottom:5}}>Total number of tokens to be sent: </p>\r\n                                                    <p style={{textAlign: 'center', marginTop:0, color:\"#e55370\", fontSize:20}}>{totalAmount.toFixed(3)}</p>\r\n                                                </div>\r\n                                                \r\n                                                \r\n                                            </>}\r\n                                        </div>\r\n                                        <div key={7} style={{paddingLeft: 1, paddingRight: 1}}>\r\n                                        </div>\r\n                                    </SwipeableViews>\r\n                                    <MobileStepper\r\n                                        className={dashboardClasses.mobileStepper}\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                        <Button\r\n                                            size=\"small\"\r\n                                            onClick={handleNext}\r\n                                            disabled={activeStep === maxSteps - 1}\r\n                                        >\r\n                                            Next\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowLeft />\r\n                                            ) : (\r\n                                            <KeyboardArrowRight />\r\n                                            )}\r\n                                        </Button>\r\n                                        }\r\n                                        backButton={\r\n                                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowRight />\r\n                                            ) : (\r\n                                            <KeyboardArrowLeft />\r\n                                            )}\r\n                                            Back\r\n                                        </Button>\r\n                                        }\r\n                                    />\r\n                                </RadioGroup>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    \r\n                </Grid>\r\n            </Box>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    \r\n                    {networkData.find((item)=>item.name==network) && <div style={{textAlign:'center'}}><img style={{width:\"50px\"}} src={networkData.find((item)=>item.name==network).url} alt=\"network\" /></div>}\r\n                    <h3 id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" style={{textAlign:'center', marginTop:0}}>\r\n                        {modalTitle}\r\n                    </h3>\r\n                    <p id=\"modal-modal-description\" sx={{ mt: 2 }} style={{textAlign:'center', fontSize:12, color:'grey'}}>\r\n                        {modalDes}\r\n                    </p>\r\n                    <Button variant=\"contained\" color=\"error\" style={{width:'100%'}} onClick={handleClose}>Close</Button>\r\n                </Box>\r\n            </Modal>\r\n            <Snackbar\r\n                open={snackbar}\r\n                autoHideDuration={600}\r\n                style={{width:100}}\r\n                onClose={handleSnackbarClose}\r\n                message=\"Successfully Copied to Clipboard\"\r\n            />\r\n        </Container >\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Vesting);\r\n","import Web3 from \"web3\"\r\nimport {\r\n    Multicall\r\n  } from 'ethereum-multicall';\r\n\r\nimport lockerContractAbi from \"./locker_abi.json\"\r\nimport erc20Abi from \"./erc20_abi.json\"\r\nimport liquidityPoolAbi from \"./liquidityPool_abi.json\"\r\nimport axios from 'axios'\r\nimport { maxTxLimit, lockerAddress, swapTokenLockerFactory, airdropAddress } from './constants'\r\n\r\n\r\nconst provider = {\r\n    \"Ethereum\": \"https://mainnet.infura.io/v3/3587df9c45a740f9812d093074c6a505\",\r\n    \"Binance Smart Chain\": \"https://data-seed-prebsc-1-s1.binance.org:8545\",\r\n    \"Avalanche\": \"https://api.avax.network/ext/bc/C/rpc\",\r\n    \"Avalanche_testnet\": \"https://api.avax-test.network/ext/bc/C/rpc\"\r\n};\r\n\r\nconst serverApi = 'http://localhost:5000/api';\r\n// const serverApi = 'https://localhost:5000/api';\r\n// const serverApi = 'https://app.snowprotocol.io/api';\r\n\r\nexport const explorer = {\r\n    \"Ethereum\": \"https://etherscan.io\",\r\n    \"Binance Smart Chain\": \"https://bscscan.com\",\r\n    \"Avalanche\": \"https://snowtrace.io\",\r\n    \"Avalanche_test\": \"https://testnet.snowtrace.io\"\r\n};\r\n\r\nexport const deposit = async (provider, token, amount, date, account, network) => {\r\n    let unlockDate = new Date(date);\r\n    let UTCTimestamp = Math.round(unlockDate.getTime() / 1000)\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress[network]);\r\n    let feeInETH = await contract.methods.feesInETH().call();\r\n    let result = await contract.methods[\"lockTokens\"](token.address, account, BigInt(amount), UTCTimestamp).send({from: account, value: network === \"Avalanche\" || network === \"Avalanche_testnet\" ? BigInt(feeInETH * Math.pow(10, 18)).toString() : feeInETH});\r\n    return result.status;\r\n}\r\n\r\nexport const withdraw = async (provider, id, account, network) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress[network]);\r\n    let result = await contract.methods[\"withdrawTokens\"](id).send({\r\n        from: account\r\n    });\r\n    return result.status;\r\n}\r\n\r\nexport const approve = async (provider, token, account, network) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"approve\"](lockerAddress[network], web3.utils.toBN(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")).send({from: account});\r\n    return result.status;\r\n}\r\n\r\nexport const approveToken = async (provider, token, account, deployedContract) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token);\r\n    let result = await contract.methods[\"approve\"](deployedContract, web3.utils.toBN(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")).send({from: account});\r\n    return result.status;\r\n}\r\n\r\nexport const allowance = async (token, account, network) => {\r\n    let web3 = new Web3(provider[network]);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"allowance\"](account, lockerAddress[network]).call();\r\n    return result;\r\n}\r\n\r\nexport const getTokenBalance = async (token, account, network) => {\r\n    let web3 = new Web3(provider[network]);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"balanceOf\"](account).call();\r\n    return result;\r\n}\r\n\r\nexport const getRawData = async (account, network) => {\r\n    let web3 = new Web3(provider[network]);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress[network]);\r\n    let depositIds = await contract.methods[\"getAllDepositIds\"]().call();\r\n    if (!depositIds.length) return []\r\n    const multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    let contractCallContext = {\r\n        reference: \"lockedToken\",\r\n        contractAddress: lockerAddress[network],\r\n        abi: lockerContractAbi,\r\n        calls: depositIds.map(each => {\r\n            return { reference: 'lockedTokensCall', methodName: 'lockedToken', methodParameters: [each] }\r\n        })\r\n    }\r\n    let response = await multicall.call(contractCallContext);\r\n    const returnValues = [];\r\n    response.results.lockedToken.callsReturnContext.map(each => {\r\n        const returnValue = {\r\n            id: each.methodParameters[0],\r\n            token: each.returnValues[0],\r\n            owner: each.returnValues[1],\r\n            amount: BigInt(parseInt(each.returnValues[2].hex, 16)).toString(),\r\n            timestamp: parseInt(each.returnValues[3].hex, 16),\r\n            isWithdrawn: each.returnValues[4]\r\n        }\r\n        if (returnValue.owner.toLowerCase() === account.toLowerCase()) returnValues.push(returnValue);\r\n    })\r\n    return returnValues;\r\n\r\n        // let lockedTokenLists = [];\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     lockedTokenLists.push(value.callsReturnContext[0][\"returnValues\"][0]);\r\n        // }\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < length; i++) {\r\n        //     contractCallContext.push({\r\n        //         reference: i,\r\n        //         contractAddress: lockerAddress,\r\n        //         abi: lockerContractAbi,\r\n        //         calls: [{ reference: 'lockedTokensCall', methodName: 'getUserTokenInfo', methodParameters: [lockedTokenLists[i], account] }]\r\n        //     })\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // let userInfo = [];\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     if (web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[2].hex) == '0') continue;\r\n        //     userInfo.push({token: lockedTokenLists[key], deposited: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[0].hex), withdrawed: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[1].hex), vestLength: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[2].hex)})\r\n        // }\r\n        // if (!userInfo.length) return [];\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < userInfo.length; i++) {\r\n        //     let context = {\r\n        //         reference: i,\r\n        //         contractAddress: lockerAddress,\r\n        //         abi: lockerContractAbi,\r\n        //         calls: []\r\n        //     }\r\n        //     for (let j = 0; j < userInfo[i][\"vestLength\"]; j++) {\r\n        //         context.calls.push({ reference: 'getUserVestingAtIndexCall', methodName: 'getUserVestingAtIndex', methodParameters: [userInfo[i].token, account, j] });\r\n        //     }\r\n        //     contractCallContext.push(context)\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     userInfo[key][\"vesting\"] = value.callsReturnContext.map(each => {\r\n        //         return each.returnValues.map(data => {\r\n        //             return web3.utils.hexToNumberString(data.hex)\r\n        //         })\r\n        //     })\r\n        // }\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < userInfo.length; i++) {\r\n        //     let context = {\r\n        //         reference: i,\r\n        //         contractAddress: userInfo[i][\"token\"],\r\n        //         abi: erc20Abi,\r\n        //         calls: [{ reference: 'decimalsCall', methodName: 'decimals' }, { reference: 'symbolCall', methodName: 'symbol'}]\r\n        //     }\r\n        //     contractCallContext.push(context);\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     userInfo[key][\"decimals\"] = value.callsReturnContext[0][\"returnValues\"][0];\r\n        //     userInfo[key][\"symbol\"] = value.callsReturnContext[1][\"returnValues\"][0];\r\n        // }\r\n        // let currentTime = Math.round(Date.now() / 1000);\r\n        // // console.log(userInfo)\r\n        // userInfo = userInfo.map(each => {\r\n        //     console.log(each);\r\n        //     let withdrawable = web3.utils.toBN(0);\r\n        //     each.vesting.map((eachVest) => {\r\n        //         if (Number(eachVest[0]) < currentTime) withdrawable = withdrawable.add(web3.utils.toBN(eachVest[1]));\r\n        //     })\r\n        //     withdrawable = withdrawable.sub(web3.utils.toBN(each.withdrawed));\r\n        //     each.withdrawable = withdrawable.toString();\r\n        //     return each;\r\n        // })\r\n    }\r\n    \r\nexport const getData = async (account, network) => {\r\n    const response = await axios.get(`${serverApi}/locker/lockedtokens/${network}/${account}`);\r\n    const lockerDataByWallet = response.data;\r\n    return lockerDataByWallet;\r\n}\r\n\r\nexport const getLockedTokenDetails = async (tokenAddress, account, network) => {\r\n\r\n    // const tokenData = data.find(each => each.address === tokenAddress);\r\n    \r\n    const rawData = await getRawData(account, network);\r\n    let web3 = new Web3(provider[network]);\r\n\r\n    let tokenLocked = BigInt(0);\r\n    rawData.map(each => {\r\n        if (each.token === tokenAddress && !each.isWithdrawn) tokenLocked = tokenLocked + BigInt(each.amount);\r\n    });\r\n    // console.log(rawData)\r\n    const tokenContract = new web3.eth.Contract(erc20Abi, tokenAddress);\r\n    let symbol = await tokenContract.methods.symbol().call();\r\n    let decimals = await tokenContract.methods.decimals().call();\r\n    let totalSupply = await tokenContract.methods.totalSupply().call();\r\n    let liquidityLocked = BigInt(0);\r\n    let tokenLockHistory = [];\r\n\r\n    const multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    let contractCallContext = rawData.map((each, index) => {\r\n        return {\r\n            reference: index,\r\n            contractAddress: each.token,\r\n            abi: erc20Abi,\r\n            calls: [{ reference: 'symbolsCall', methodName: 'symbol' }]\r\n        }\r\n    })\r\n    let response = await multicall.call(contractCallContext);\r\n    let symbols = [];\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        symbols.push(value.callsReturnContext[0].returnValues[0]);\r\n    }\r\n    // console.log(rawData)\r\n    for (let i = 0; i < rawData.length; i++) {\r\n        let each = rawData[i];\r\n        let address = each.token;\r\n        let ownerAddress = each.owner;\r\n        let tokenAmount = each.amount;\r\n        let timestamp = each.timestamp;\r\n        let isWithdrawn = each.isWithdrawn;\r\n        //default token\r\n        if (address.toLowerCase() === tokenAddress.toLowerCase()) tokenLockHistory.push({id: each.id, address: address, owner: ownerAddress, tokenAmount: tokenAmount, timestamp: timestamp, isWithdrawn: isWithdrawn});\r\n        //pool token\r\n        else if (symbols[i] === 'HUL') {\r\n            let poolContract = new web3.eth.Contract(liquidityPoolAbi, each.token);\r\n            let token0 = await poolContract.methods.token0().call();\r\n            let token1 = await poolContract.methods.token1().call();\r\n            if (token0.toLowerCase() === tokenAddress.toLowerCase() || token1.toLowerCase() === tokenAddress.toLowerCase()) {\r\n                let totalSupply = await poolContract.methods.totalSupply().call();\r\n                let baseTokenTotalAmount = await tokenContract.methods.balanceOf(address).call();\r\n                let baseTokenAmount = BigInt(baseTokenTotalAmount) * BigInt(tokenAmount) / BigInt(totalSupply);\r\n                if (!each.isWithdrawn) liquidityLocked = liquidityLocked + baseTokenAmount;\r\n                tokenLockHistory.push({id: each.id, isPool: true, address: address, owner: ownerAddress, tokenAmount: tokenAmount, baseTokenAmount: baseTokenAmount.toString(), timestamp: timestamp, isWithdrawn: isWithdrawn});\r\n            }\r\n        }\r\n    }\r\n    // let tokenSymbol = await tokenContract.methods.symbol().call();\r\n    // let tokenDecimals = await tokenContract.methods.decimals().call();\r\n    // let tokenLocked = await tokenContract.methods.balanceOf(lockerAddress).call();\r\n    // let tokenTotalSupply = await tokenContract.methods.totalSupply().call();\r\n\r\n    let lockerContract = new web3.eth.Contract(lockerContractAbi, lockerAddress[network]);\r\n    let depositEvents = await lockerContract.getPastEvents(\"LogLocking\", {\r\n        fromBlock: 0\r\n    })\r\n    let withdrawEvents = await lockerContract.getPastEvents(\"LogWithdrawal\", {\r\n        fromBlock: 0\r\n    })\r\n\r\n    // let tokenTransferEvents = await tokenContract.getPastEvents(\"Transfer\",{\r\n    //     fromBlock: 0,\r\n    //     toBlock: \"latest\",\r\n    //     filter: {\r\n    //         to: lockerAddress\r\n    //     }\r\n    // })\r\n    // let tokenTransferTransactions = await Promise.all(tokenTransferEvents.map(each => web3.eth.getTransaction(each.transactionHash)))\r\n    // tokenTransferTransactions = tokenTransferTransactions.filter(each => each.input.length === 266);\r\n    \r\n    \r\n    for(let i=0; i<depositEvents.length; i++) {\r\n        let blockDetail = await web3.eth.getBlock(depositEvents[i].blockNumber);\r\n        depositEvents[i].timestamp = blockDetail.timestamp;\r\n    }\r\n    for(let i=0; i<withdrawEvents.length; i++) {\r\n        let blockDetail = await web3.eth.getBlock(withdrawEvents[i].blockNumber);\r\n        withdrawEvents[i].timestamp = blockDetail.timestamp;\r\n    }\r\n    let events = [], j = 0;\r\n    for(let i=0; i<depositEvents.length;i++) {\r\n        if(withdrawEvents[j] && withdrawEvents[j].returnValues.index === depositEvents[i].returnValues.index) {\r\n            events.push({deposit: depositEvents[i], withdraw: withdrawEvents[j]});\r\n            j++;\r\n        } else {\r\n            events.push({deposit: depositEvents[i]});\r\n        }\r\n    }\r\n\r\n    return {\r\n        address: tokenAddress,\r\n        symbol: symbol,\r\n        decimals: decimals,\r\n        totalSupply: totalSupply,\r\n        liquidityLocked: liquidityLocked,\r\n        tokenLocked: tokenLocked,\r\n        history: tokenLockHistory,\r\n        events: events\r\n    }\r\n}\r\n\r\nexport const checkWalletAddress = (walletAddress, network) => {\r\n    let web3 = new Web3(provider[network]);\r\n    return web3.utils.isAddress(walletAddress);\r\n}\r\n\r\nexport const getLastDeployedContract = async (account, network) => {\r\n    const response = await axios.get(`${serverApi}/vesting/lastDeployed/${network}/${account}`);\r\n    const lastDeployedAddress = response.data;\r\n    return lastDeployedAddress;\r\n}\r\n\r\nexport const deployContract = async (provider, account, token, network) => {\r\n    const web3 = new Web3(provider);\r\n    const abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]\r\n    const contract = new web3.eth.Contract(abi, swapTokenLockerFactory[network]);\r\n    let result = contract.methods.createTokenLocker(token).send({\r\n        from: account\r\n    })\r\n    return result;\r\n}\r\n\r\nexport const sendTokenVesting = async (provider, deployedContract, csvData, token, account, network) => {\r\n    let _users = [], _amounts = [], _lockHours = [], _sendAmount = BigInt(0);\r\n    const web3 = new Web3(provider);\r\n    let abi = [{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let contract = new web3.eth.Contract(abi, token);\r\n    let decimals = await contract.methods.decimals().call();\r\n    csvData.map(each => {\r\n        _users.push(each.address);\r\n        _amounts.push(BigInt(each.amount * Math.pow(10, decimals)).toString());\r\n        switch(each.period[each.period.length - 1]) {\r\n            case 'M':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 30 * 24);\r\n                break;\r\n            case 'W':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 7 * 24);\r\n                break;\r\n            case 'D':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 24);\r\n                break;\r\n            case 'h':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1));\r\n                \r\n        }\r\n        _sendAmount += BigInt(each.amount * Math.pow(10, decimals));\r\n    })\r\n    _sendAmount = _sendAmount.toString();\r\n    abi = [{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_lockHours\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"_sendAmount\",\"type\":\"uint256\"}],\"name\":\"sendLockTokenMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    \r\n    contract = new web3.eth.Contract(abi, deployedContract)\r\n    let feesInETH = await contract.methods.feesInETH().call();\r\n    console.log(_users, _amounts, _lockHours, _sendAmount, account)\r\n    let result = await contract.methods.sendLockTokenMany(_users, _amounts, _lockHours, _sendAmount).send({\r\n        from: account,\r\n        value: network === \"Avalanche\" || network === \"Avalanche_testnet\" ? BigInt(feesInETH * Math.pow(10, 18)).toString(): feesInETH\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const getClaimTokenList = async (address, network) => {\r\n    const web3 = new Web3(provider[network]);\r\n    let factoryContract, abi, erc20Abi, allContracts, response, multicall, contractCallContext;\r\n    abi = [{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    factoryContract = new web3.eth.Contract(abi, swapTokenLockerFactory[network]);\r\n    allContracts = await factoryContract.methods.getAllContracts().call();\r\n    console.log(allContracts)\r\n    multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    erc20Abi = [{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    contractCallContext = allContracts.map((each, index) => {\r\n        return {\r\n            reference: index,\r\n            contractAddress: each,\r\n            abi: abi,\r\n            calls: [\r\n                { reference: 'getLockDataCall', methodName: 'getLockData', methodParameters: [address] },\r\n                { reference: 'getTokenCall', methodName: 'getToken'}\r\n            ]\r\n        }\r\n    })\r\n    response = await multicall.call(contractCallContext);\r\n    let returnData = [];\r\n    contractCallContext = [];\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        let amount = BigInt(value.callsReturnContext[0].returnValues[0].hex).toString();\r\n        let claimedAmount = BigInt(value.callsReturnContext[0].returnValues[1].hex).toString();\r\n        let lockTimestamp = BigInt(value.callsReturnContext[0].returnValues[2].hex).toString();\r\n        let lastUpdated = BigInt(value.callsReturnContext[0].returnValues[3].hex).toString();\r\n        let lockHours = value.callsReturnContext[0].returnValues[4];\r\n        let contract = allContracts[key];\r\n        let token = value.callsReturnContext[1].returnValues[0];\r\n        if (amount !== '0') {\r\n            contractCallContext.push({\r\n                reference: returnData.length,\r\n                contractAddress: token,\r\n                abi: erc20Abi,\r\n                calls: [\r\n                    { reference: 'nameCall', methodName: 'name' },\r\n                    { reference: 'decimalsCall', methodName: 'decimals' },\r\n                    { reference: 'symbolCall', methodName: 'symbol' }\r\n                ]\r\n            })\r\n            returnData.push({\r\n                amount: amount,\r\n                claimedAmount: claimedAmount,\r\n                lockTimestamp: lockTimestamp,\r\n                lastUpdated: lastUpdated,\r\n                lockHours: lockHours,\r\n                contract: contract,\r\n                token: {\r\n                    address: token\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    response = await multicall.call(contractCallContext);\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        let name = value.callsReturnContext[0].returnValues[0];\r\n        let symbol = value.callsReturnContext[2].returnValues[0];\r\n        let decimals = value.callsReturnContext[1].returnValues[0];\r\n        returnData[key].token.name = name;\r\n        returnData[key].token.symbol = symbol;\r\n        returnData[key].token.decimals = decimals;\r\n    }\r\n    return returnData;\r\n}\r\n\r\nexport const claimToken = async (provider, tokenDetail, account) => {\r\n    let currentTimestamp = Math.floor(Date.now() / 1000);\r\n    if (currentTimestamp - tokenDetail.lastUpdated < 3600) return {state: false, reason: 'Wait to next claim available'};\r\n    const passedHours = Math.floor((currentTimestamp - tokenDetail.lockTimestamp) / 3600);\r\n    let availableAmount = BigInt(Math.floor(tokenDetail.amount * passedHours / tokenDetail.lockHours) - tokenDetail.claimedAmount).toString();\r\n    if (Number(availableAmount) > maxTxLimit) availableAmount = maxTxLimit.toString();\r\n    const web3 = new Web3(provider);\r\n    const abi = [{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n    const contract = new web3.eth.Contract(abi, tokenDetail.contract);\r\n    const response = await contract.methods.claimToken(availableAmount).send({\r\n        from: account\r\n    });\r\n    console.log(response);\r\n}\r\n\r\nexport const airdrop = async (provider, csvData, token, account, network) => {\r\n    let _users = [], _amounts = [];\r\n    const web3 = new Web3(provider);\r\n    let abi = [{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    // console.log(token)\r\n    let contract = new web3.eth.Contract(abi, token);\r\n    let decimals = await contract.methods.decimals().call();\r\n    csvData.map(each => {\r\n        _users.push(web3.utils.toChecksumAddress(each.address));\r\n        _amounts.push(BigInt(each.amount * Math.pow(10, decimals)).toString());\r\n    })\r\n    // console.log(_users)\r\n    // console.log(_amounts)\r\n    abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    contract = new web3.eth.Contract(abi, airdropAddress[network]);\r\n    let feeInETH = await contract.methods.feesInETH().call();\r\n    let result = await contract.methods.airdrop(token, _users, _amounts).send({\r\n        from: account,\r\n        value: network === \"Avalanche\" || network === \"Avalanche_testnet\" ? BigInt(feeInETH * Math.pow(10, 18)).toString() : feeInETH\r\n    });\r\n    return result;\r\n}","import axios from 'axios';\r\nimport { walletAddress } from './redux/reducers';\r\n\r\nconst apiKey = 'SvMhtTsmQ239NmpwWjnnLWXtag5Jt8wYp7NF8F3Tear1QSaDRl9gnM34JZVXdLFV';\r\nconst apiConfig = {\r\n    headers: {\r\n        'x-api-key': apiKey\r\n    }\r\n}\r\nconst serverUrl = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const getTokenPrice = async function (_chain, _tokenAddress) {\r\n    let price;\r\n    try {\r\n        price = await axios.get(`${serverUrl}/erc20/${_tokenAddress}/price?chain=${_chain}`, apiConfig);\r\n    } catch (e) {\r\n        price = 0;\r\n    }\r\n    return price && price.data;\r\n}\r\n\r\nexport const getTokenMetadata = async function (_chain, _tokenAddress) {\r\n    const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n    return tokenMetadata.data;\r\n}\r\n\r\nexport const getTokenBalance = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const balances = await axios.get(`${serverUrl}/${_walletAddress}/erc20?chain=${_chain}&token_addresses=${_tokenAddress}`, apiConfig);\r\n    return balances.data;\r\n}\r\n\r\nexport const runContractFunction = async function (_chain, _contractAddress, _functionName, _abi, _params) {\r\n    let result;\r\n    try {\r\n        result = await axios.post(`${serverUrl}/${_contractAddress}/function?chain=${_chain}&function_name=${_functionName}`, {\r\n            \"abi\": _abi,\r\n            \"params\": _params\r\n        }, apiConfig);\r\n    } catch (e) {\r\n        result = null;\r\n    }\r\n    return result ? result.data : result;\r\n}\r\n\r\nexport const getCurrentFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const dynamicFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDynamicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) return 0;\r\n    const dynamicFee = await runContractFunction(_chain, _tokenAddress, 'getDynamicFee', dynamicFeeAbi, {from:_walletAddress});\r\n    return dynamicFee;\r\n}\r\n\r\nexport const isExcludedFromFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const isExcludedFromFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    return await runContractFunction(_chain, _tokenAddress, 'isExcludedFromFee', isExcludedFromFeeAbi, {account:_walletAddress});\r\n}\r\n\r\nexport const getCommonFee = async function (_chain, _tokenAddress) {\r\n    const liquidityAndMarketingFeeAbi = [{\"inputs\":[],\"name\":\"_liquidityAndMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const taxFeeAbi = [{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let commonFee = 0;\r\n    await Promise.all([\r\n        runContractFunction(_chain, _tokenAddress, '_liquidityAndMarketingFee', liquidityAndMarketingFeeAbi, {}),\r\n        runContractFunction(_chain, _tokenAddress, '_taxFee', taxFeeAbi, {})\r\n    ]).then(results => results.map(each => commonFee += Number(each)));\r\n    return commonFee;\r\n}\r\n\r\nexport const burntAndLeftTokenPercent = async function (_chain, _tokenAddress) {\r\n    const burntVsCirculatingSupplyAbi = [{\"inputs\":[],\"name\":\"burntVsCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'burntVsCirculatingSupply', burntVsCirculatingSupplyAbi);\r\n    return {burnt: Number(data[0]), left: Number(data[1]), leftPercent: data[1] / (Number(data[0]) + Number(data[1])) * 100};\r\n}\r\n\r\nexport const totalFees = async function (_chain, _tokenAddress) {\r\n    const totalFeesAbi = [{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'totalFees', totalFeesAbi);\r\n    return data;\r\n}\r\n\r\nexport const getTransactions = async function (_chain, _walletAddress) {\r\n    const transactions = await axios.get(`${serverUrl}/${_walletAddress}/erc20/transfers?chain=${_chain}&offset=0&oder=desc`, apiConfig);\r\n    return transactions.data;\r\n}\r\n\r\nexport const getLogsByAddress = async function (_chain, _tokenAddress) {\r\n    let offset = 0;\r\n    const response = await axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig);\r\n    let logs = response.data.result;\r\n    const total = response.data.total;\r\n    const pages = Math.ceil(total / 500);\r\n    let page = 1;\r\n    let getLogFunctions = [];\r\n    while (page < pages) {\r\n        offset = page * 500;\r\n        getLogFunctions.push(axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig));\r\n        page++;\r\n    }\r\n    if (getLogFunctions.length) {\r\n        await Promise.all(getLogFunctions).then(results => {\r\n            results.map(each => {\r\n                logs = logs.concat(each.data.result);\r\n            })\r\n        })\r\n    }\r\n    return logs;\r\n}\r\n\r\nfunction getAddress(topic) {\r\n    if (topic === null || topic === '') return '';\r\n    return `0x${topic.substring(topic.length - 40)}`;\r\n}\r\n\r\nfunction filterLogs (logs, _walletAddress) {\r\n    return logs.filter(each => getAddress(each.topic1) === _walletAddress.toLowerCase() || getAddress(each.topic2) === _walletAddress.toLowerCase());\r\n}\r\n\r\nfunction getValue(topic) {\r\n    return parseInt(topic, 16);\r\n}\r\n\r\nasync function calculateBuySell(logs, _chain, _tokenAddress, _walletAddress) {\r\n    let buy = 0, sell = 0, isFee = true;\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) isFee = false;\r\n    logs.map(each => {\r\n        if (getAddress(each.topic1) === _walletAddress.toLowerCase()) {\r\n            if (isFee) {\r\n                sell += getValue(each.data) / 97 * 100;\r\n            } else {\r\n                sell += getValue(each.data);\r\n            }\r\n        } else buy += getValue(each.data);\r\n    })\r\n    let result = {buy: buy, sell: sell};\r\n    return result;\r\n}\r\n\r\nexport const walletExchange = async function(_chain, _tokenAddress, _walletAddress) {\r\n    let logs;\r\n    await getLogsByAddress(_chain, _tokenAddress).then(data=> {\r\n        logs = filterLogs(data, _walletAddress);\r\n    })\r\n    return await calculateBuySell(logs, _chain, _tokenAddress, _walletAddress);\r\n}"],"sourceRoot":""}