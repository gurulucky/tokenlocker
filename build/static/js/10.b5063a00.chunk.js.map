{"version":3,"sources":["pages/Dashboard.js","web3.js","api.js"],"names":["connect","state","statistics","props","React","useState","activeStep","setActiveStep","open","setOpen","snackbar","setSnackbar","network","setNetwork","modalTitle","setModalTitle","modalDes","setModalDes","subMethod","setSubMethod","lockAmount","setLockAmount","undefined","withdrawDate","setWithdrawDate","dateUseful","setDateUseful","isAllowed","setIsAllowed","lockAmountMax","setLockAmountMax","theme","useTheme","classes","useStyles","pools","mobileClasses","mobile","dashboardClasses","dashboard","isMobile","useMediaQuery","userBalance","useSelector","token","tokenData","data","tokenLists","dispatch","useDispatch","useWeb3React","account","connector","tokenAddress","values","setValues","handleNext","a","provider","window","ethereum","currentNetworkData","networkData","filter","each","name","request","method","params","chainId","chainData","console","log","handleOpen","prevActiveStep","symbol","code","catch","error","useEffect","getData","then","newData","type","TOKENLISTS","payload","interval","setInterval","clearInterval","address","getTokenBalance","tokenBalance","USERBALANCE","allowance","allowanceAmount","handleChange","event","target","value","length","getTokenMetadata","CHAINDATA","find","item","chain","TOKENDATA","handleClose","depositToken","tokenAmount","toString","BigInt","Math","pow","decimals","unlockDate","getProvider","deposit","status","approveToken","approve","showLockup","history","push","subtitle","url","subData","subTitle","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","Row","nextUnlock","index","row","lockedTokenAmount","lockedLiquidity","currentTime","Date","now","map","timestamp","isWithdrawn","isLiquidity","amount","sx","borderBottom","component","scope","style","cursor","onClick","text","onCopy","title","align","toFixed","toDateString","variant","color","width","className","root","maxWidth","paddingLeft","paddingRight","info","container","direction","justifyContent","alignItems","marginTop","xs","sm","md","display","textAlign","href","underline","button","cardHeader","src","defaultValue","axis","onChangeIndex","step","networkSelector","padding","border","borderRadius","networkImage","alt","networkTitle","networkDes","height","backgroundColor","fillCircle","emptyCircle","m","htmlFor","id","onChange","endAdornment","position","showPassword","onMouseDown","preventDefault","edge","label","margin","textLeft","tokenImage","tokenTitle","textRight","balanceContainer","InputLabelProps","shrink","inputprops","min","InputProps","e","parseFloat","marginBottom","fontSize","dateAdapter","AdapterDateFns","renderInput","datetimepicker","currentDate","handleDate","disabled","mobileStepper","steps","nextButton","size","maxSteps","backButton","Paper","onClose","top","left","transform","bgcolor","boxShadow","p","mt","autoHideDuration","message","serverApi","explorer","date","UTCTimestamp","round","getTime","web3","Web3","contract","eth","Contract","lockerContractAbi","lockerAddress","methods","feesInETH","call","feeInETH","send","from","result","withdraw","erc20Abi","utils","toBN","deployedContract","axios","get","response","lockerDataByWallet","checkWalletAddress","walletAddress","isAddress","getLastDeployedContract","lastDeployedAddress","deployContract","abi","swapTokenLockerFactory","createTokenLocker","sendTokenVesting","csvData","_users","_amounts","_lockHours","_sendAmount","period","slice","sendLockTokenMany","getClaimTokenList","factoryContract","getAllContracts","allContracts","multicall","Multicall","web3Instance","tryAggregate","contractCallContext","reference","contractAddress","calls","methodName","methodParameters","returnData","Object","entries","results","key","callsReturnContext","returnValues","hex","claimedAmount","lockTimestamp","lastUpdated","lockHours","claimToken","tokenDetail","currentTimestamp","floor","reason","passedHours","availableAmount","Number","maxTxLimit","airdrop","toChecksumAddress","airdropAddress","apiConfig","headers","serverUrl","_chain","_tokenAddress","tokenMetadata"],"mappings":"6pBA4wBeA,uBAJS,SAAAC,GAAK,MAAK,CAC9BC,WAAYD,EAAMC,cAGPF,EA5tBG,SAACG,GAEf,MAAoCC,IAAMC,SAAS,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwBH,IAAMC,UAAS,GAAvC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCL,IAAMC,UAAS,GAA/C,oBAAOK,GAAP,MAAiBC,GAAjB,MACA,GAA8BN,mBAAS,aAAvC,qBAAOO,GAAP,MAAgBC,GAAhB,MACA,GAAoCR,mBAAS,IAA7C,qBAAOS,GAAP,MAAmBC,GAAnB,MACA,GAAgCV,mBAAS,IAAzC,qBAAOW,GAAP,MAAiBC,GAAjB,MACA,GAAkCZ,mBAAS,kBAA3C,qBAAOa,GAAP,MAAkBC,GAAlB,MACA,GAAoCd,mBAAS,GAA7C,qBAAOe,GAAP,MAAmBC,GAAnB,MACA,GAAwChB,wBAASiB,GAAjD,qBAAOC,GAAP,MAAqBC,GAArB,MACA,GAAoCnB,oBAAS,GAA7C,qBAAOoB,GAAP,MAAmBC,GAAnB,MACA,GAAkCrB,mBAAS,GAA3C,qBAAOsB,GAAP,MAAkBC,GAAlB,MACA,GAA0CvB,oBAAS,GAAnD,qBAAOwB,GAAP,MAAsBC,GAAtB,MAEMC,GAAQC,cACRC,GAAUC,KAAUC,QACpBC,GAAgBF,KAAUG,SAC1BC,GAAmBJ,KAAUK,YAC7BC,GAAWC,YAAc,qBACzBC,GAAcC,aAAY,SAAA1C,GAAK,OAAIA,EAAMyC,eACzCE,GAAQD,aAAY,SAAA1C,GAAK,OAAIA,EAAM4C,aACnCC,GAAOH,aAAY,SAAA1C,GAAK,OAAIA,EAAM8C,cAElCC,GAAWC,cAejB,GAA+BC,cAAvBC,GAAR,GAAQA,QAASC,GAAjB,GAAiBA,UAEjB,GAA4BhD,IAAMC,SAAS,CACvCgD,aAAa,KADjB,qBAAOC,GAAP,MAAeC,GAAf,MAQMC,GAAU,uCAAG,8BAAAC,EAAA,6DACTC,EAAWC,OAAOC,SAClBC,EAAsBC,GAAYC,QAAO,SAACC,GAAD,OAAQA,EAAKC,OAASrD,MAFtD,kBAIL8C,EAASQ,QAAQ,CACrBC,OAAQ,6BACRC,OAAQ,CAAC,CAAEC,QAASR,EAAmB,GAAGS,UAAUD,YAN3C,OAQXE,QAAQC,IAAI,wDACM,GAAdlE,OACgBgB,IAAZ6B,IAEApC,GAAc,yBACdE,GAAY,mCAAD,OAAoCL,GAApC,6CAAgFA,GAAhF,kGACX6D,MAEAlE,GAAc,SAACmE,GAAD,OAAoBA,EAAiB,KAErC,GAAbpE,QACegB,GAAhBsB,GAAM+B,QACN5D,GAAc,uBACdE,GAAY,mCAAD,OAAoCL,GAApC,iHACX6D,MAMJlE,GAAc,SAACmE,GAAD,OAAoBA,EAAiB,KA5B5C,gDAgCc,OAArB,KAAYE,MACfL,QAAQC,IAAI,iEACZd,EACIQ,QAAQ,CACLC,OAAQ,0BACRC,OAAQ,CAAC,eAAIP,EAAmB,GAAGS,cAEtCO,OAAM,SAACC,GACJP,QAAQC,IAAIM,OAEY,OAArB,KAAYF,MACnBL,QAAQC,IAAI,+BA3CL,yDAAH,qDAiDhBO,qBAAU,WACN,GAAK5B,GAAL,CACA6B,aAAQ7B,GAASvC,IAASqE,MAAK,SAAAC,GAC3BlC,GAAS,CAACmC,KAAKC,KAAYC,QAASH,OAExC,IAAMI,EAAWC,aAAY,WACzBP,aAAQ7B,GAASvC,IAASqE,MAAK,SAAAC,GAC3BlC,GAAS,CAACmC,KAAKC,KAAYC,QAASH,SAEzC,KACH,OAAO,kBAAMM,cAAcF,OAC5B,CAACnC,GAASvC,KAEbmE,oBAAS,sBAAC,8BAAAtB,EAAA,yDACN7B,GAAa,GACRuB,IAAYP,GAAM6C,QAFjB,iEAGqBC,aAAgB9C,GAAOO,GAASvC,IAHrD,cAGA+E,EAHA,OAIN3C,GAAS,CAACmC,KAAKS,KAAaP,QAASM,IAJ/B,SAKwBE,aAAUjD,GAAOO,GAASvC,IALlD,OAKAkF,EALA,OAMgGlE,GAAlGkE,EAAkB,oBAA6F,EACjG,GAPZ,4CAQP,CAAC3C,GAASP,GAAOQ,GAAWxC,KAE/B,IAAMmF,GAAY,uCAAG,WAAOC,GAAP,iBAAAvC,EAAA,yDACjBF,GAAU,CAAEF,aAAc2C,EAAMC,OAAOC,QACN,IAA7BF,EAAMC,OAAOC,MAAMC,OAFN,wBAGPV,EAAUO,EAAMC,OAAOC,MAHhB,kBAKeE,aAAiBC,KAAUC,MAAK,SAACC,GAAD,OAAQA,EAAKtC,MAAMrD,MAAS4F,MAAOf,GALlF,OAKH5C,EALG,OAMTG,GAAS,CACLmC,KAAKsB,KACLpB,QAASxC,EAAU,KARd,kDAWTG,GAAS,CACLmC,KAAKsB,KACLpB,QAAS,KAbJ,gCAiBbrC,GAAS,CACLmC,KAAKsB,KACLpB,QAAS,KAnBA,0DAAH,sDAoDZZ,GAAa,kBAAMhE,GAAQ,IAC3BiG,GAAc,kBAAMjG,GAAQ,IAc5BkG,GAAY,uCAAG,gCAAAlD,EAAA,6DAEEmD,EAAf/E,GAA6Ba,GAAYmE,WAC1BC,OAAO1F,GAAa2F,KAAKC,IAAI,GAAIpE,GAAMqE,WAAWJ,WACjEK,EAAa3F,GAJA,SAKI6B,GAAU+D,cALd,OAKbzD,EALa,OAMjB0D,aAAQ1D,EAAUd,GAAOgE,EAAaM,EAAY/D,GAASvC,IAASqE,KAApE,uCAAyE,WAAOoC,GAAP,eAAA5D,EAAA,sEAC/CuB,aAAQ7B,IADuC,OAC/D+B,EAD+D,OAErElC,GAAS,CAACmC,KAAKC,KAAYC,QAASH,IACpC3E,EAAc,GACdyC,GAAS,CACLmC,KAAKsB,KACLpB,QAAS,KAEb7D,QAAgBF,GAChBI,IAAc,GATuD,2CAAzE,uDANiB,2CAAH,qDAmBZ4F,GAAY,uCAAG,4BAAA7D,EAAA,sEACIL,GAAU+D,cADd,OACbzD,EADa,OAEjB6D,aAAQ7D,EAAUd,GAAOO,GAASvC,IAASqE,MAAK,SAACoC,GACzCA,GAAQzF,GAAa,MAHZ,2CAAH,qDAOZ4F,GAAU,uCAAG,WAAOnE,GAAP,SAAAI,EAAA,sDACftD,EAAMsH,QAAQC,KAAd,kBAA8BvE,GAA9B,YAAyCE,IAD1B,2CAAH,sDAIVS,GAAa,CACf,CAACG,KAAK,WAAY0D,SAAS,sCAAuCC,IAAI,oBAAqBC,QAAQ,CAAC,CAAC5D,KAAK,iBAAkB6D,SAAS,+BAAgCF,IAAI,iBAAkBtD,UAAU,CAACD,QAAQ,MAAO0D,UAAU,WAAYC,QAAQ,CAAC,iCAAkCC,kBAAkB,CAAC,wBAAyBC,eAAgB,CAAEvD,OAAO,QAASsC,SAAU,MAC9W,CAAChD,KAAK,sBAAuB0D,SAAS,sCAAuCC,IAAI,oBAAqBC,QAAQ,CAAC,CAAC5D,KAAK,iBAAkB6D,SAAS,+BAAgCF,IAAI,iBAAkBtD,UAAU,CAACD,QAAQ,OAAQ0D,UAAU,sBAAuBC,QAAQ,CAAC,qCAAsCC,kBAAkB,CAAC,wBAAyBC,eAAgB,CAAEvD,OAAO,MAAOsC,SAAU,MACvY,CAAChD,KAAK,YAAa0D,SAAS,uCAAwCC,IAAI,0BAA2BC,QAAQ,CAAC,CAAC5D,KAAK,iBAAkB6D,SAAS,+BAAgCF,IAAI,iBAAkBtD,UAAU,CAACD,QAAQ,SAAU0D,UAAU,oBAAqBC,QAAQ,CAAC,yCAA0CC,kBAAkB,CAAC,yBAA0BC,eAAgB,CAAEvD,OAAO,OAAQsC,SAAU,MAC1Y,CAAChD,KAAK,oBAAqB0D,SAAS,uCAAwCC,IAAI,0BAA2BC,QAAQ,CAAC,CAAC5D,KAAK,iBAAkB6D,SAAS,+BAAgCF,IAAI,iBAAkBtD,UAAU,CAACD,QAAQ,SAAU0D,UAAU,oBAAqBC,QAAQ,CAAC,8CAA+CC,kBAAkB,CAAC,iCAAkCC,eAAgB,CAAEvD,OAAO,OAAQsC,SAAU,OAW7ZkB,GAAM,SAAChI,GACT,IACIiI,EADIC,EAAelI,EAAfkI,MAAOC,EAAQnI,EAARmI,IACCC,EAAoB,EAAGC,GAAkB,EACnDC,EAAcC,KAAKC,MAUzB,OATAL,EAAIxF,KAAK8F,KAAI,SAAA5E,GACLA,EAAK6E,UAAYJ,EAAc,MAC1BL,EACIA,EAAapE,EAAK6E,YAAWT,EAAapE,EAAK6E,WADvCT,EAAapE,EAAK6E,WAGlC7E,EAAK8E,aAAgB9E,EAAK+E,cAAaR,GAAqBvE,EAAKgF,OAASjC,KAAKC,IAAI,GAAIhD,EAAKiD,YAC5FjD,EAAK8E,aAAe9E,EAAK+E,cAAaP,GAAkB,MAI7D,qCACI,gBAAC,IAAD,CAEAS,GAAI,CAAE,QAAS,CAAEC,aAAc,UAF/B,UAaI,eAAC,IAAD,UACKb,EAAQ,IAEb,gBAAC,IAAD,CAAWc,UAAU,KAAKC,MAAM,MAAhC,UACI,uBAAMC,MAAO,CAACC,OAAQ,WAAYC,QAAS,kBAAI/B,GAAWc,EAAI1F,MAAM6C,UAApE,SAA+E6C,EAAI1F,MAAM+B,SACzF,eAAC,kBAAD,CAAiB6E,KAAMlB,EAAI1F,MAAM6C,QAASgE,OAAQ,kBAzFrC9I,IAAY,IAyFzB,SACI,eAAC,KAAD,CAAS+I,MAAM,OAAf,SACI,eAAC,IAAD,UACI,eAAC,KAAD,aAKhB,eAAC,IAAD,CAAWC,MAAM,QAAjB,SAA0BpB,EAAkBqB,QAAQ,KACpD,eAAC,IAAD,CAAWD,MAAM,QAAjB,SAA0BnB,GAAmB,eAAC,IAAD,MAC7C,eAAC,IAAD,CAAWmB,MAAM,QAAjB,SACKvB,EAAa,IAAIM,KAAKN,GAAYyB,eAAiB,KAExD,eAAC,IAAD,CAAWF,MAAM,QAAjB,SACI,eAAC,IAAD,CAAQG,QAAQ,YAAYC,MAAM,YAAYV,MAAO,CAACW,MAAO,QAAUT,QAAS,kBAAM/B,GAAWc,EAAI1F,MAAM6C,UAA3G,0BAiEpB,OACI,gBAAC,IAAD,CAAWwE,UAAWhI,GAAQiI,KAAMC,SAAS,KAAKd,MAAO,CAACe,YAAY,GAAIC,aAAa,IAAvF,UACI,eAAC,IAAD,CAAKJ,UAAWhI,GAAQqI,KAAxB,SACI,gBAAC,IAAD,CAAMC,WAAS,EAACC,UAAU,MAAMC,eAAe,eAAeC,WAAW,SAAzE,UACI,eAAC,IAAD,CAAMT,UAAWzH,GAAQ,UAAMJ,GAAc8H,KAApB,qBAA+C,mBAAoBb,MAAO,CAACsB,UAAU,IAAKpE,MAAI,EAACqE,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAA5I,SACI,uBAAKzB,MAAO,CAACc,SAAS,IAAKY,QAAQ,eAAgBC,UAAU,QAA7D,UACI,+EACA,kJACA,eAAC,IAAD,CACIC,KAAI,4BACJhF,OAAO,SACP8D,MAAM,OACNmB,UAAU,OACVjB,UAAWhI,GAAQkJ,OALvB,SAMC,eAAC,IAAD,CAAQrB,QAAQ,YAAhB,wCAGT,eAAC,IAAD,CAAMG,UAAWzH,GAAQ,UAAMJ,GAAc8H,KAApB,SAAmC,OAAQb,MAAO,CAACsB,UAAU,IAAKpE,MAAI,EAACqE,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAApH,SACI,gBAAC,IAAD,CAAMb,UAAU,OAAhB,UACI,eAAC,IAAD,CACIA,UAAW3H,GAAiB8I,WAC5B1B,MAAM,oBAEV,gBAAC,IAAD,WACI,sBAAK2B,IAAI,cACT,gBAAC,IAAD,CACI,kBAAgB,iCAChBC,aAAa,SACbrH,KAAK,sBAHT,UAKI,gBAAC,IAAD,CACIsH,KAA0B,QAApBxJ,GAAMyI,UAAsB,YAAc,IAChDnC,MAAO/H,EACPkL,cA1NX,SAACC,GACtBlL,EAAckL,IAsNc,UAMI,uBAAapC,MAAO,CAACe,YAAY,EAAGC,aAAa,GAAjD,UACI,oBAAGhB,MAAO,CAAC2B,UAAU,UAAWjB,MAAM,gBAAtC,4CAIIjG,GAAY8E,KAAI,SAACrC,GAAD,OAChB,gBAAC,IAAD,CACI0D,UAAWhI,GAAQyJ,gBACnBnB,WAAS,EACTC,UAAU,MACVC,eAAe,eACfC,WAAW,SACXrB,MAAO,CAACsC,QAAQ,WAAYC,OAAOrF,EAAKtC,MAAMrD,GAAQ,oBAAoB,wBAAyBiL,aAAa,OAEhHtC,QAAW,kBA1KpCtF,EA0KsDsC,EAAKtC,KAzK9EpD,GAAWoD,QACXjB,GAAS,CACLmC,KAAKsB,KACLpB,QAAS,KAJK,IAACpB,GAkKqB,UAUI,eAAC,IAAD,CAAMsC,MAAI,EAAEqE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAhC,SACI,gBAAC,IAAD,CACIP,WAAS,EACTC,UAAU,MAEVE,WAAW,SAJf,UAMI,eAAC,IAAD,CAAMnE,MAAI,EAAC0D,UAAU,cAAcW,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArD,SACI,sBAAKb,UAAW3H,GAAiBwJ,aAAcT,IAAK9E,EAAKqB,IAAKmE,IAAI,cAEtE,gBAAC,IAAD,CAAMxF,MAAI,EAAGqE,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAhC,UACI,oBAAIf,MAAM,gBAAgBE,UAAW3H,GAAiB0J,aAAtD,SACKzF,EAAKtC,OAEV,oBAAG8F,MAAM,gBAAgBE,UAAW3H,GAAiB2J,WAArD,SACK1F,EAAKoB,mBAKtB,eAAC,IAAD,CAAMpB,MAAI,EAAE0D,UAAU,cAAcW,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAtD,SACKvE,EAAKtC,MAAMrD,GAAU,sBAAKyI,MAAO,CAACW,MAAM,OAAQkC,OAAO,OAAQL,aAAa,OAAQM,gBAAgB,UAAWpB,QAAQ,kBAAqB,sBAAK1B,MAAO,CAACW,MAAM,OAAQkC,OAAO,OAAQL,aAAa,OAAQD,OAAO,oBAAqBb,QAAQ,sBAxB/OxE,EAAKtC,WAbZ,GA2CV,uBAAaoF,MAAO,CAACe,YAAY,EAAGC,aAAa,GAAjD,UACI,oBAAGhB,MAAO,CAAC2B,UAAU,UAAWjB,MAAM,gBAAtC,+IAKc,IAAVnJ,IAAgBkD,GAAYwC,MAAK,SAACC,GAAD,OAAQA,EAAKtC,MAAMrD,MAASiH,QAAQe,KAAI,SAAC5E,GAAD,OAAQ,gBAAC,IAAD,CACjFiG,UAAWhI,GAAQyJ,gBACnBnB,WAAS,EACTC,UAAU,MACVC,eAAe,eACfC,WAAW,SACXrB,MAAO,CAACsC,QAAQ,WAAYC,OAAO5H,EAAKC,MAAM/C,GAAU,oBAAoB,wBAAyB2K,aAAa,OAElHtC,QAAW,kBAAIpI,GAAa6C,EAAKC,OARgD,UAUjF,eAAC,IAAD,CAAMsC,MAAI,EAAEqE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAhC,SACI,gBAAC,IAAD,CACIP,WAAS,EACTC,UAAU,MACVE,WAAW,SAHf,UAKI,eAAC,IAAD,CAAMnE,MAAI,EAAC0D,UAAU,cAAcW,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArD,SACI,sBAAKb,UAAW3H,GAAiBwJ,aAAcT,IAAKrH,EAAK4D,IAAKmE,IAAI,cAEtE,gBAAC,IAAD,CAAMxF,MAAI,EAAGqE,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAhC,UACI,oBAAIf,MAAM,gBAAgBE,UAAW3H,GAAiB0J,aAAtD,SACKhI,EAAKC,OAEV,oBAAI8F,MAAM,gBAAgBE,UAAW3H,GAAiB2J,WAAtD,SACKjI,EAAK8D,mBAKtB,eAAC,IAAD,CAAMvB,MAAI,EAAE0D,UAAU,cAAcW,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAtD,SACK9G,EAAKC,MAAM/C,GAAY,sBAAK+I,UAAW3H,GAAiB8J,aAAgB,sBAAKnC,UAAW3H,GAAiB+J,kBAvBzGrI,EAAKC,WAbR,GA0CV,uBAAaoF,MAAO,CAACe,YAAY,EAAGC,aAAa,GAAjD,UACI,oBAAGJ,UAAU,cAAcF,MAAM,gBAAjC,gEAGA,gBAAC,IAAD,CAAad,GAAI,CAAEqD,EAAG,EAAGtC,MAAO,QAAUF,QAAQ,WAAWT,MAAO,CAACW,MAAM,0BAA3E,UACI,eAAC,IAAD,CAAYuC,QAAQ,8BAApB,qBACA,eAAC,IAAD,CACIC,GAAG,8BACHrH,KAAK,OACLe,MAAO5C,GAAOD,aACdoJ,SAAU1G,GAEV2G,aACA,eAAC,IAAD,CAAgBC,SAAS,MAAzB,SACI,eAAC,IAAD,CACA,aAAW,gBACXpD,QAjV1B,WACtBhG,GAAU,2BACHD,IADE,IAELsJ,cAAetJ,GAAOsJ,iBA+UsBC,YA3UpB,SAAC7G,GAC7BA,EAAM8G,kBA2U0CC,KAAK,MAJL,SAMA,eAAC,IAAD,QAIJC,MAAM,qBAKD1L,GAATsB,SAAqCtB,GAAfsB,GAAM+B,QAAqC,IAAf/B,GAAM+B,QACxD,uBAAK0E,MAAO,CAACe,YAAY,GAAIC,aAAa,IAA1C,UACI,oBAAGhB,MAAO,CAAC4D,OAAO,OAAlB,yBACA,gBAAC,IAAD,CACI1C,WAAS,EACTC,UAAU,MACVC,eAAe,gBACfC,WAAW,SAJf,UAMI,gBAAC,IAAD,CAAMnE,MAAI,EAAC0D,UAAW3H,GAAiB4K,SAAUtC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAnE,UACI,sBAAKb,UAAW3H,GAAiB6K,WAAY9B,IAAI,YAAYU,IAAI,YACjE,oBAAIhC,MAAM,gBAAgBE,UAAW3H,GAAiB8K,WAAtD,SACKxK,GAAM+B,YAGf,eAAC,IAAD,CAAM4B,MAAI,EAAC0D,UAAW3H,GAAiB+K,UAAYzC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArE,SACI,eAAC,IAAD,CAAQhB,QAAQ,YAAYC,MAAM,QAAQc,GAAI,GAAItB,QAldtF,WAChBhJ,GAAc,SAACmE,GAAD,OAAoBA,EAAiB,MAidC,8BA7CV,GAoDV,uBAAa2E,MAAO,CAACe,YAAY,EAAGC,aAAa,GAAjD,UACI,gBAAC,IAAD,CACIE,WAAS,EACTC,UAAU,MACVC,eAAe,gBACfC,WAAW,SACXT,UAAW3H,GAAiBgL,iBALhC,UAOI,eAAC,IAAD,CAAM/G,MAAI,EAAC0D,UAAW3H,GAAiB4K,SAAUtC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAnE,SACI,eAAC,IAAD,CACI0B,GAAG,kBACHQ,MAAM,cACN7H,KAAK,SACLoI,gBAAiB,CACbC,QAAQ,EACRC,WAAY,CAAEC,IAAK,IAEvBC,WAAY,CAAEF,WAAY,CAAEC,IAAK,IACjC5D,QAAQ,WACR2C,SAjX3B,SAACmB,GACtBvM,GAAcwM,WAAWD,EAAE3H,OAAOC,QAClCpE,IAAiB,IAgX+BoE,MAAO9E,OAGf,gBAAC,IAAD,CAAMmF,MAAI,EAAC0D,UAAW3H,GAAiB+K,UAAYzC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArE,UACI,qBAAGzB,MAAO,CAACyE,aAAa,EAAGnD,UAAU,EAAGoD,SAAU,QAAlD,uBAAsErL,GAAcqE,KAAKC,IAAI,GAAIpE,GAAMqE,WAAW2C,QAAQ,MAC1H,gBAAC,IAAD,CACIW,WAAS,EACTC,UAAU,MACVC,eAAe,gBACfC,WAAW,SAJf,UAMI,eAAC,IAAD,CAAMnE,MAAI,EAAC0D,UAAW3H,GAAiB4K,SAAUtC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAnE,SACI,eAAC,IAAD,CAAQhB,QAAQ,YAAYC,MAAM,QAAQc,GAAI,GAAItB,QAlY9E,WACxBlI,GAAcqB,GAAcqE,KAAKC,IAAI,GAAIpE,GAAMqE,WAC/CnF,IAAiB,IAgYmC,mBAEJ,gBAAC,IAAD,CAAMyE,MAAI,EAAC0D,UAAW3H,GAAiB+K,UAAWzC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAApE,UACI,sBAAKzB,MAAO,CAAC6C,OAAO,IAAKb,IAAI,YAAYU,IAAI,YAC7C,oBAAIhC,MAAM,gBAAgBE,UAAW3H,GAAiB8K,WAAtD,SACKxK,GAAM+B,qBAM3B,wBAIA,gBAAC,IAAD,CACI4F,WAAS,EACTC,UAAU,MACVC,eAAe,gBACfC,WAAW,SACXT,UAAW,UAACzH,GAAuDJ,GAAckL,iBAAvDhL,GAAiBgL,kBAL/C,UAOQ,eAAC,IAAD,CAAsBU,YAAaC,IAAnC,SACI,eAAC,IAAD,CACIzB,GAAG,kBACHQ,MAAM,cACNkB,YAAa,SAAC/N,GAAD,OAAW,eAAC,IAAD,2BAAeA,GAAf,IAAsB8J,UAAWzH,GAAQ,UAAMJ,GAAc+L,gBAApB,OAOjEjI,MAAO3E,GACPkL,SAAU,SAACvG,GAAD,OArZ/C,SAACA,GAChB1E,GAAgB0E,GAChB,IAAMkI,EAAc,IAAI1F,KACxBnE,QAAQC,IAAI0B,EAAQkI,GACK1M,GAArBwE,EAAQkI,GAEZ5M,GAAgB0E,GA+YyDmI,CAAWnI,QAIxC,+BAEiB,GAAbvE,GAAiB,eAAC,IAAD,CAAQmI,QAAQ,YAAYC,MAAM,YAAYc,GAAI,GAAIyD,UAAW7M,GAAY8H,QAAS5C,GAAcsD,UAAWzH,GAAQ,UAAMJ,GAAc+I,QAApB,GAAvH,qBACD,GAAbxJ,GAAiB,eAAC,IAAD,CAAQmI,QAAQ,YAAYC,MAAM,YAAYc,GAAI,GAAItB,QAASjC,GAAc2C,UAAWzH,GAAQ,UAAMJ,GAAc+I,QAApB,GAAhG,qBAAsJ,eAAC,IAAD,CAAQrB,QAAQ,YAAYC,MAAM,YAAYc,GAAI,GAAIyD,UAAQ,EAACrE,UAAWzH,GAAQ,UAAMJ,GAAc+I,QAApB,GAAlF,6BAzEhL,MA+Fd,eAAC,IAAD,CACIlB,UAAW3H,GAAiBiM,cAC5BC,MAzlBnB,EA0lBmB7B,SAAS,SACTrM,WAAYA,EACZmO,WACA,gBAAC,IAAD,CACIC,KAAK,QACLnF,QAAS/F,GACT8K,SAAyBK,IAAfrO,EAHd,iBAMyB,QAApByB,GAAMyI,UACP,eAAC,IAAD,IAEA,eAAC,IAAD,OAIJoE,WACA,gBAAC,IAAD,CAAQF,KAAK,QAAQnF,QA7dtC,WACfhJ,GAAc,SAACmE,GAAD,OAAoBA,EAAiB,MA4duB4J,SAAyB,IAAfhO,EAApD,UACyB,QAApByB,GAAMyI,UACP,eAAC,IAAD,IAEA,eAAC,IAAD,IAJJ,uBAcpB,eAAC,IAAD,CAAMP,UAAWzH,GAAQ,UAAMJ,GAAc8H,KAApB,UAAoC,OAAQb,MAAO,CAACsB,UAAU,IAAKpE,MAAI,EAACqE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAArH,SACI,gBAAC,IAAD,CAAMb,UAAU,OAAhB,UACI,eAAC,IAAD,CACIA,UAAW3H,GAAiB8I,WAC5B1B,MAAM,sBAEV,gBAAC,IAAD,WAeoB,GAAf5G,GAAKqD,QACN,uBAAK8D,UAAU,cAAcZ,MAAO,CAACW,MAAM,OAAQ2B,QAAQ,YAA3D,UACI,sBAAKN,IAAI,cAAcU,IAAI,UAAU1C,MAAO,CAAC6C,OAAO,OACpD,qBAAI7C,MAAO,CAACyE,aAAa,GAAzB,4BACA,oBAAGzE,MAAO,CAACU,MAAM,OAAOkD,OAAO,GAA/B,sDAEY,GAAfnK,GAAKqD,QAAe,eAAC,IAAD,CAAgBgD,UAAW0F,IAA3B,SACjB,gBAAC,IAAD,CAAQ,aAAW,oBAAnB,UACI,eAAC,IAAD,UACA,gBAAC,IAAD,WACI,eAAC,IAAD,iBACA,eAAC,IAAD,oBACA,eAAC,IAAD,CAAWlF,MAAM,QAAjB,2BACA,eAAC,IAAD,CAAWA,MAAM,QAAjB,8BACA,eAAC,IAAD,CAAWA,MAAM,QAAjB,yBACA,eAAC,IAAD,CAAWA,MAAM,eAGrB,eAAC,IAAD,UACC7G,GAAK8F,KAAI,SAACN,EAAKD,GAAN,OACN,eAACF,GAAD,CAAgCG,IAAKA,EAAKD,MAAOA,GAAjD,oBAAuBA,2BAWvD,eAAC,IAAD,CACI7H,KAAMA,EACNsO,QAASpI,GACT,kBAAgB,oBAChB,mBAAiB,0BAJrB,SAMI,gBAAC,IAAD,CAAKuC,GAvqBH,CACV0D,SAAU,WACVoC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXjF,MAAO,IACPkF,QAAS,mBACTtD,OAAQ,iBACRC,aAAa,OACbsD,UAAW,GACXC,EAAG,GA6pBK,UAEKtL,GAAYwC,MAAK,SAACC,GAAD,OAAQA,EAAKtC,MAAMrD,OAAY,sBAAKyI,MAAO,CAAC2B,UAAU,UAAvB,SAAkC,sBAAK3B,MAAO,CAACW,MAAM,QAASqB,IAAKvH,GAAYwC,MAAK,SAACC,GAAD,OAAQA,EAAKtC,MAAMrD,MAASgH,IAAKmE,IAAI,cAC1K,qBAAIS,GAAG,oBAAoB1C,QAAQ,KAAKX,UAAU,KAAKE,MAAO,CAAC2B,UAAU,SAAUL,UAAU,GAA7F,SACK7J,KAEL,oBAAG0L,GAAG,0BAA0BvD,GAAI,CAAEoG,GAAI,GAAKhG,MAAO,CAAC2B,UAAU,SAAU+C,SAAS,GAAIhE,MAAM,QAA9F,SACK/I,KAEL,eAAC,IAAD,CAAQ8I,QAAQ,YAAYC,MAAM,QAAQV,MAAO,CAACW,MAAM,QAAST,QAAS7C,GAA1E,wBAGR,eAAC,IAAD,CACIlG,KAAME,GACN4O,iBAAkB,IAClBjG,MAAO,CAACW,MAAM,KACd8E,QAjiBgB,kBAAMnO,IAAY,IAkiBlC4O,QAAQ,4C,mpBCtvBlB7L,EAAW,CACb,SAAY,gEACZ,sBAAuB,iDACvB,UAAa,wCACb,kBAAqB,8CAGnB8L,EAAY,4BAILC,EAAW,CACpB,SAAY,uBACZ,sBAAuB,sBACvB,UAAa,uBACb,eAAkB,gCAGTrI,EAAO,uCAAG,WAAO1D,EAAUd,EAAOoG,EAAQ0G,EAAMvM,EAASvC,GAA/C,yBAAA6C,EAAA,6DACfyD,EAAa,IAAIwB,KAAKgH,GACtBC,EAAe5I,KAAK6I,MAAM1I,EAAW2I,UAAY,KACjDC,EAAO,IAAIC,IAAKrM,GAChBsM,EAAW,IAAIF,EAAKG,IAAIC,SAASC,EAAmBC,IAAcxP,IAJnD,SAKEoP,EAASK,QAAQC,YAAYC,OAL/B,cAKfC,EALe,gBAMAR,EAASK,QAAT,WAA+BzN,EAAM6C,QAAStC,EAAS2D,OAAOkC,GAAS2G,GAAcc,KAAK,CAACC,KAAMvN,EAAS+C,MAAmB,cAAZtF,GAAuC,sBAAZA,EAAkCkG,OAAO0J,EAAWzJ,KAAKC,IAAI,GAAI,KAAKH,WAAa2J,IAN/N,cAMfG,EANe,yBAOZA,EAAOtJ,QAPK,4CAAH,gEAUPuJ,EAAQ,uCAAG,WAAOlN,EAAU8I,EAAIrJ,EAASvC,GAA9B,mBAAA6C,EAAA,6DAChBqM,EAAO,IAAIC,IAAKrM,GAChBsM,EAAW,IAAIF,EAAKG,IAAIC,SAASC,EAAmBC,IAAcxP,IAFlD,SAGDoP,EAASK,QAAT,eAAmC7D,GAAIiE,KAAK,CAC3DC,KAAMvN,IAJU,cAGhBwN,EAHgB,yBAMbA,EAAOtJ,QANM,2CAAH,4DASRE,EAAO,uCAAG,WAAO7D,EAAUd,EAAOO,EAASvC,GAAjC,mBAAA6C,EAAA,6DACfqM,EAAO,IAAIC,IAAKrM,GAChBsM,EAAW,IAAIF,EAAKG,IAAIC,SAASW,EAAUjO,EAAM6C,SAFlC,SAGAuK,EAASK,QAAT,QAA4BD,IAAcxP,GAAUkP,EAAKgB,MAAMC,KAAK,mFAAmFN,KAAK,CAACC,KAAMvN,IAHnK,cAGfwN,EAHe,yBAIZA,EAAOtJ,QAJK,2CAAH,4DAOPC,EAAY,uCAAG,WAAO5D,EAAUd,EAAOO,EAAS6N,GAAjC,mBAAAvN,EAAA,6DACpBqM,EAAO,IAAIC,IAAKrM,GAChBsM,EAAW,IAAIF,EAAKG,IAAIC,SAASW,EAAUjO,GAFvB,SAGLoN,EAASK,QAAT,QAA4BW,EAAkBlB,EAAKgB,MAAMC,KAAK,mFAAmFN,KAAK,CAACC,KAAMvN,IAHxJ,cAGpBwN,EAHoB,yBAIjBA,EAAOtJ,QAJU,2CAAH,4DAOZxB,EAAS,uCAAG,WAAOjD,EAAOO,EAASvC,GAAvB,mBAAA6C,EAAA,6DACjBqM,EAAO,IAAIC,IAAKrM,EAAS9C,IACzBoP,EAAW,IAAIF,EAAKG,IAAIC,SAASW,EAAUjO,EAAM6C,SAFhC,SAGFuK,EAASK,QAAT,UAA8BlN,EAASiN,IAAcxP,IAAU2P,OAH7D,cAGjBI,EAHiB,yBAIdA,GAJc,2CAAH,0DAOTjL,EAAe,uCAAG,WAAO9C,EAAOO,EAASvC,GAAvB,mBAAA6C,EAAA,6DACvBqM,EAAO,IAAIC,IAAKrM,EAAS9C,IACzBoP,EAAW,IAAIF,EAAKG,IAAIC,SAASW,EAAUjO,EAAM6C,SAF1B,SAGRuK,EAASK,QAAT,UAA8BlN,GAASoN,OAH/B,cAGvBI,EAHuB,yBAIpBA,GAJoB,2CAAH,0DA0Gf3L,EAAO,uCAAG,WAAO7B,EAASvC,GAAhB,iBAAA6C,EAAA,sEACIwN,IAAMC,IAAN,UAAa1B,EAAb,gCAA8C5O,EAA9C,YAAyDuC,IAD7D,cACbgO,EADa,OAEbC,EAAqBD,EAASrO,KAFjB,kBAGZsO,GAHY,2CAAH,wDAqHPC,EAAqB,SAACC,EAAe1Q,GAE9C,OADW,IAAImP,IAAKrM,EAAS9C,IACjBkQ,MAAMS,UAAUD,IAGnBE,EAAuB,uCAAG,WAAOrO,EAASvC,GAAhB,iBAAA6C,EAAA,sEACZwN,IAAMC,IAAN,UAAa1B,EAAb,iCAA+C5O,EAA/C,YAA0DuC,IAD9C,cAC7BgO,EAD6B,OAE7BM,EAAsBN,EAASrO,KAFF,kBAG5B2O,GAH4B,2CAAH,wDAMvBC,EAAc,uCAAG,WAAOhO,EAAUP,EAASP,EAAOhC,GAAjC,qBAAA6C,EAAA,6DACpBqM,EAAO,IAAIC,IAAKrM,GAChBiO,EAAM,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,oBAAoB,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,SAAS,KAAO,YAAY,gBAAkB,UAAU,KAAO,aACpN3B,EAAW,IAAIF,EAAKG,IAAIC,SAASyB,EAAKC,IAAuBhR,IAC/D+P,EAASX,EAASK,QAAQwB,kBAAkBjP,GAAO6N,KAAK,CACxDC,KAAMvN,IALgB,kBAOnBwN,GAPmB,2CAAH,4DAUdmB,EAAgB,uCAAG,WAAOpO,EAAUsN,EAAkBe,EAASnP,EAAOO,EAASvC,GAA5D,iCAAA6C,EAAA,6DACxBuO,EAAS,GAAIC,EAAW,GAAIC,EAAa,GAAIC,EAAcrL,OAAO,GAChEgJ,EAAO,IAAIC,IAAKrM,GAClBiO,EAAM,CAAC,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,UAAU,SAAU,EAAM,gBAAkB,OAAO,KAAO,aAC7I3B,EAAW,IAAIF,EAAKG,IAAIC,SAASyB,EAAK/O,GAJd,SAKPoN,EAASK,QAAQpJ,WAAWsJ,OALrB,cAKxBtJ,EALwB,OAM5B8K,EAAQnJ,KAAI,SAAA5E,GAGR,OAFAgO,EAAOtK,KAAK1D,EAAKyB,SACjBwM,EAASvK,KAAKZ,OAAO9C,EAAKgF,OAASjC,KAAKC,IAAI,GAAIC,IAAWJ,YACpD7C,EAAKoO,OAAOpO,EAAKoO,OAAOjM,OAAS,IACpC,IAAK,IACD+L,EAAWxK,KAAoD,GAA/C1D,EAAKoO,OAAOC,MAAM,EAAGrO,EAAKoO,OAAOjM,OAAS,GAAU,IACpE,MACJ,IAAK,IACD+L,EAAWxK,KAAoD,EAA/C1D,EAAKoO,OAAOC,MAAM,EAAGrO,EAAKoO,OAAOjM,OAAS,GAAS,IACnE,MACJ,IAAK,IACD+L,EAAWxK,KAAoD,GAA/C1D,EAAKoO,OAAOC,MAAM,EAAGrO,EAAKoO,OAAOjM,OAAS,IAC1D,MACJ,IAAK,IACD+L,EAAWxK,KAAK1D,EAAKoO,OAAOC,MAAM,EAAGrO,EAAKoO,OAAOjM,OAAS,IAGlEgM,GAAerL,OAAO9C,EAAKgF,OAASjC,KAAKC,IAAI,GAAIC,OAErDkL,EAAcA,EAAYtL,WAC1B8K,EAAM,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,YAAY,KAAO,SAAS,KAAO,aAAa,CAAC,aAAe,YAAY,KAAO,WAAW,KAAO,aAAa,CAAC,aAAe,WAAW,KAAO,aAAa,KAAO,YAAY,CAAC,aAAe,UAAU,KAAO,cAAc,KAAO,YAAY,KAAO,oBAAoB,QAAU,GAAG,gBAAkB,aAAa,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,aAEpf3B,EAAW,IAAIF,EAAKG,IAAIC,SAASyB,EAAKX,GA5BV,UA6BNhB,EAASK,QAAQC,YAAYC,OA7BvB,eA6BxBD,EA7BwB,OA8B5B/L,QAAQC,IAAIwN,EAAQC,EAAUC,EAAYC,EAAahP,GA9B3B,UA+BT6M,EAASK,QAAQiC,kBAAkBN,EAAQC,EAAUC,EAAYC,GAAa1B,KAAK,CAClGC,KAAMvN,EACN+C,MAAmB,cAAZtF,GAAuC,sBAAZA,EAAkCkG,OAAOwJ,EAAYvJ,KAAKC,IAAI,GAAI,KAAKH,WAAYyJ,IAjC7F,eA+BxBK,EA/BwB,yBAmCrBA,GAnCqB,4CAAH,gEAsChB4B,EAAiB,uCAAG,WAAO9M,EAAS7E,GAAhB,uEAAA6C,EAAA,6DACvBqM,EAAO,IAAIC,IAAKrM,EAAS9C,IAE/B+Q,EAAM,CAAC,CAAC,OAAS,GAAG,KAAO,kBAAkB,QAAU,CAAC,CAAC,aAAe,YAAY,KAAO,GAAG,KAAO,cAAc,gBAAkB,OAAO,KAAO,aACnJa,EAAkB,IAAI1C,EAAKG,IAAIC,SAASyB,EAAKC,IAAuBhR,IAJvC,SAKR4R,EAAgBnC,QAAQoC,kBAAkBlC,OALlC,cAK7BmC,EAL6B,OAM7BnO,QAAQC,IAAIkO,GACZC,EAAY,IAAIC,IAAU,CAAEC,aAAc/C,EAAMgD,cAAc,IAC9DnB,EAAM,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,YAAY,KAAO,cAAc,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,WAAW,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,WAAW,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,UAAU,CAAC,aAAe,SAAS,KAAO,GAAG,KAAO,WAAW,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,aACpiBd,EAAW,CAAC,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,OAAO,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,UAAU,SAAU,EAAM,gBAAkB,OAAO,KAAO,YAAY,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,SAAS,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,WAAW,SAAU,EAAM,gBAAkB,OAAO,KAAO,aAClbkC,EAAsBL,EAAa9J,KAAI,SAAC5E,EAAMqE,GAC1C,MAAO,CACH2K,UAAW3K,EACX4K,gBAAiBjP,EACjB2N,IAAKA,EACLuB,MAAO,CACH,CAAEF,UAAW,kBAAmBG,WAAY,cAAeC,iBAAkB,CAAC3N,IAC9E,CAAEuN,UAAW,eAAgBG,WAAY,iBAjBxB,UAqBZR,EAAUpC,KAAKwC,GArBH,QAwB7B,IAHA5B,EArB6B,OAsBzBkC,EAAa,GACjBN,EAAsB,GACtB,MAA2BO,OAAOC,QAAQpC,EAASqC,SAAnD,eAA8D,EAAD,oBAAjDC,EAAiD,KAA5CvN,EAA4C,KACrD8C,EAASlC,OAAOZ,EAAMwN,mBAAmB,GAAGC,aAAa,GAAGC,KAAK/M,WACjEgN,EAAgB/M,OAAOZ,EAAMwN,mBAAmB,GAAGC,aAAa,GAAGC,KAAK/M,WACxEiN,EAAgBhN,OAAOZ,EAAMwN,mBAAmB,GAAGC,aAAa,GAAGC,KAAK/M,WACxEkN,EAAcjN,OAAOZ,EAAMwN,mBAAmB,GAAGC,aAAa,GAAGC,KAAK/M,WACtEmN,EAAY9N,EAAMwN,mBAAmB,GAAGC,aAAa,GACrD3D,EAAW0C,EAAae,GACxB7Q,EAAQsD,EAAMwN,mBAAmB,GAAGC,aAAa,GACtC,MAAX3K,IACA+J,EAAoBrL,KAAK,CACrBsL,UAAWK,EAAWlN,OACtB8M,gBAAiBrQ,EACjB+O,IAAKd,EACLqC,MAAO,CACH,CAAEF,UAAW,WAAYG,WAAY,QACrC,CAAEH,UAAW,eAAgBG,WAAY,YACzC,CAAEH,UAAW,aAAcG,WAAY,aAG/CE,EAAW3L,KAAK,CACZsB,OAAQA,EACR6K,cAAeA,EACfC,cAAeA,EACfC,YAAaA,EACbC,UAAWA,EACXhE,SAAUA,EACVpN,MAAO,CACH6C,QAAS7C,MAnDI,iBAyDZ+P,EAAUpC,KAAKwC,GAzDH,QA0D7B,IADA5B,EAzD6B,OA0D7B,MAA2BmC,OAAOC,QAAQpC,EAASqC,SAAnD,eAA8D,EAAD,oBAAjDC,EAAiD,KAA5CvN,EAA4C,KACrDjC,EAAOiC,EAAMwN,mBAAmB,GAAGC,aAAa,GAChDhP,EAASuB,EAAMwN,mBAAmB,GAAGC,aAAa,GAClD1M,EAAWf,EAAMwN,mBAAmB,GAAGC,aAAa,GACxDN,EAAWI,GAAK7Q,MAAMqB,KAAOA,EAC7BoP,EAAWI,GAAK7Q,MAAM+B,OAASA,EAC/B0O,EAAWI,GAAK7Q,MAAMqE,SAAWA,EAhER,yBAkEtBoM,GAlEsB,4CAAH,wDAqEjBY,EAAU,uCAAG,WAAOvQ,EAAUwQ,EAAa/Q,GAA9B,2BAAAM,EAAA,4DAClB0Q,EAAmBpN,KAAKqN,MAAM1L,KAAKC,MAAQ,MACxBuL,EAAYH,YAAc,MAF3B,yCAEwC,CAAC9T,OAAO,EAAOoU,OAAQ,iCAF/D,cAGhBC,EAAcvN,KAAKqN,OAAOD,EAAmBD,EAAYJ,eAAiB,MAC5ES,EAAkBzN,OAAOC,KAAKqN,MAAMF,EAAYlL,OAASsL,EAAcJ,EAAYF,WAAaE,EAAYL,eAAehN,WAC3H2N,OAAOD,GAAmBE,MAAYF,EAAkBE,IAAW5N,YACjEiJ,EAAO,IAAIC,IAAKrM,GAChBiO,EAAM,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,UAAU,KAAO,YAAY,KAAO,aAAa,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,aAAa,KAAO,aAC5M3B,EAAW,IAAIF,EAAKG,IAAIC,SAASyB,EAAKuC,EAAYlE,UARlC,UASCA,EAASK,QAAQ4D,WAAWM,GAAiB9D,KAAK,CACrEC,KAAMvN,IAVY,QAShBgO,EATgB,OAYtB5M,QAAQC,IAAI2M,GAZU,4CAAH,0DAeVuD,EAAO,uCAAG,WAAOhR,EAAUqO,EAASnP,EAAOO,EAASvC,GAA1C,6BAAA6C,EAAA,6DACfuO,EAAS,GAAIC,EAAW,GACtBnC,EAAO,IAAIC,IAAKrM,GAClBiO,EAAM,CAAC,CAAC,UAAW,EAAK,OAAS,GAAG,KAAO,WAAW,QAAU,CAAC,CAAC,KAAO,GAAG,KAAO,UAAU,SAAU,EAAM,gBAAkB,OAAO,KAAO,aAE7I3B,EAAW,IAAIF,EAAKG,IAAIC,SAASyB,EAAK/O,GALvB,SAMEoN,EAASK,QAAQpJ,WAAWsJ,OAN9B,cAMftJ,EANe,OAOnB8K,EAAQnJ,KAAI,SAAA5E,GACRgO,EAAOtK,KAAKoI,EAAKgB,MAAM6D,kBAAkB3Q,EAAKyB,UAC9CwM,EAASvK,KAAKZ,OAAO9C,EAAKgF,OAASjC,KAAKC,IAAI,GAAIC,IAAWJ,eAI/D8K,EAAM,CAAC,CAAC,OAAS,CAAC,CAAC,aAAe,UAAU,KAAO,QAAQ,KAAO,WAAW,CAAC,aAAe,YAAY,KAAO,SAAS,KAAO,aAAa,CAAC,aAAe,YAAY,KAAO,WAAW,KAAO,cAAc,KAAO,UAAU,QAAU,GAAG,gBAAkB,UAAU,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,gBAAgB,QAAU,CAAC,CAAC,aAAe,iBAAiB,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,YAAY,CAAC,OAAS,GAAG,KAAO,YAAY,QAAU,CAAC,CAAC,aAAe,UAAU,KAAO,GAAG,KAAO,YAAY,gBAAkB,OAAO,KAAO,aACxjB3B,EAAW,IAAIF,EAAKG,IAAIC,SAASyB,EAAKiD,IAAehU,IAdlC,UAeEoP,EAASK,QAAQC,YAAYC,OAf/B,eAefC,EAfe,iBAgBAR,EAASK,QAAQqE,QAAQ9R,EAAOoP,EAAQC,GAAUxB,KAAK,CACtEC,KAAMvN,EACN+C,MAAmB,cAAZtF,GAAuC,sBAAZA,EAAkCkG,OAAO0J,EAAWzJ,KAAKC,IAAI,GAAI,KAAKH,WAAa2J,IAlBtG,eAgBfG,EAhBe,yBAoBZA,GApBY,4CAAH,+D,yzgBChbdkE,G,OAAY,CACdC,QAAS,CACL,YAHO,sEAMTC,EAAY,uCAYL3O,EAAgB,uCAAG,WAAgB4O,EAAQC,GAAxB,eAAAxR,EAAA,sEACAwN,IAAMC,IAAN,UAAa6D,EAAb,iCAA+CC,EAA/C,sBAAmEC,GAAiBJ,GADpF,cACtBK,EADsB,yBAErBA,EAAcpS,MAFO,2CAAH,yD","file":"static/js/10.b5063a00.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {connect, useSelector, useDispatch} from 'react-redux';\r\nimport {useWeb3React} from \"@web3-react/core\";\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\n\r\n// ** Import Material UI Components\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Card from \"@mui/material/Card\";\r\n\r\nimport Container from \"@mui/material/Container\";\r\n\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport CardHeader from \"@mui/material/CardHeader\";\r\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\r\nimport Modal from '@mui/material/Modal';\r\nimport {  RadioGroup } from \"@mui/material\";\r\nimport MobileStepper from '@mui/material/MobileStepper';\r\nimport Button from '@mui/material/Button';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Search from '@mui/icons-material/Search';\r\nimport { Snackbar } from \"@mui/material\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport CheckIcon from '@mui/icons-material/Check';\r\nimport { TextField, Table, TableHead, TableBody, TableRow, TableCell, TableContainer, Paper, Box, IconButton } from \"@mui/material\";\r\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n// import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Link from \"@mui/material/Link\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport { Tooltip } from \"@mui/material\";\r\n\r\nimport useStyles from \"../assets/styles\";\r\n\r\nimport { TOKENDATA, USERBALANCE, TOKENLISTS } from \"../redux/constants\";\r\n\r\nimport {  CHAINDATA } from \"../constants\";\r\nimport { getTokenMetadata } from \"../api\";\r\nimport { deposit, approve, allowance, getTokenBalance, getData, lockerAddress, explorer } from \"../web3\"\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [snackbar, setSnackbar] = React.useState(false);\r\n    const [network, setNetwork] = useState(\"Avalanche\");\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalDes, setModalDes] = useState(\"\");\r\n    const [subMethod, setSubMethod] = useState(\"Project Tokens\"); \r\n    const [lockAmount, setLockAmount] = useState(0);\r\n    const [withdrawDate, setWithdrawDate] = useState(undefined);\r\n    const [dateUseful, setDateUseful] = useState(false);\r\n    const [isAllowed, setIsAllowed] = useState(0);// 0: checking, 1: not allowed, 2: allowed\r\n    const [lockAmountMax, setLockAmountMax] = useState(false);\r\n    const maxSteps = 4;\r\n    const theme = useTheme();\r\n    const classes = useStyles.pools();\r\n    const mobileClasses = useStyles.mobile();\r\n    const dashboardClasses = useStyles.dashboard();\r\n    const isMobile = useMediaQuery(\"(max-width:600px)\");\r\n    const userBalance = useSelector(state => state.userBalance);\r\n    const token = useSelector(state => state.tokenData);\r\n    const data = useSelector(state => state.tokenLists);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '2px solid #fff',\r\n        borderRadius:'10px',\r\n        boxShadow: 24,\r\n        p: 4,\r\n    };\r\n\r\n    const { account, connector } = useWeb3React();\r\n\r\n    const [values, setValues] = React.useState({\r\n        tokenAddress:\"\",\r\n    });\r\n\r\n    const selectToken = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1)\r\n    }\r\n\r\n    const handleNext = async () => {\r\n        const provider = window.ethereum;\r\n        const currentNetworkData =  networkData.filter((each)=>each.name === network);\r\n        try {\r\n            await provider.request({\r\n              method: 'wallet_switchEthereumChain',\r\n              params: [{ chainId: currentNetworkData[0].chainData.chainId}],\r\n            });\r\n            console.log(\"You have succefully switched to Binance Test network\")\r\n            if (activeStep == 0) {\r\n                if (account === undefined) {\r\n                    \r\n                    setModalTitle(\"Please connect Wallet\");\r\n                    setModalDes(`Before you can create a lock on ${network}, you must connect your wallet to ${network} network on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                    handleOpen();\r\n                }else {\r\n                    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                }\r\n            }else if(activeStep ==2) {\r\n                if (token.symbol == undefined) {\r\n                    setModalTitle(\"Please select Token\");\r\n                    setModalDes(`Before you can create a lock on ${network}, you must select token on your wallet. Use testnet for test transactions, and mainnet for real token locks.`);\r\n                    handleOpen();\r\n                }else {\r\n                    \r\n                    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n                }\r\n            }else {\r\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n            }\r\n        } catch (switchError) {\r\n            // This error code indicates that the chain has not been added to MetaMask.\r\n            if (switchError.code === 4902) {\r\n             console.log(\"This network is not available in your metamask, please add it\")\r\n             provider\r\n                .request({\r\n                    method: 'wallet_addEthereumChain',\r\n                    params: [{...currentNetworkData[0].chainData}]\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error)\r\n                })\r\n            } else if (switchError.code === 4001) {\r\n                console.log(\"Switch Request has rejected\")\r\n            }\r\n        }\r\n        \r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!account) return;\r\n        getData(account, network).then(newData => {\r\n            dispatch({type:TOKENLISTS, payload: newData});\r\n        });\r\n        const interval = setInterval(() => {\r\n            getData(account, network).then(newData => {\r\n                dispatch({type:TOKENLISTS, payload: newData});\r\n            });\r\n        }, 5000);\r\n        return () => clearInterval(interval);\r\n    }, [account, network])\r\n\r\n    useEffect(async () => {\r\n        setIsAllowed(0);\r\n        if (!account || !token.address) return;\r\n        const tokenBalance = await getTokenBalance(token, account, network);\r\n        dispatch({type:USERBALANCE, payload: tokenBalance});\r\n        const allowanceAmount = await allowance(token, account, network);\r\n        if (allowanceAmount < 115792089237316195423570985008687907853269984665640564039457584007913129639935) setIsAllowed(1);\r\n        else setIsAllowed(2);\r\n    }, [account, token, connector, network])\r\n\r\n    const handleChange = async (event) => {\r\n        setValues({ tokenAddress: event.target.value });\r\n        if (event.target.value.length == 42) {\r\n            const address = event.target.value;\r\n            try {\r\n                const tokenData = await getTokenMetadata(CHAINDATA.find((item)=>item.name==network).chain, address);\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: tokenData[0]\r\n                })\r\n            } catch(e) {\r\n                dispatch({\r\n                    type:TOKENDATA,\r\n                    payload: {}\r\n                })\r\n            }\r\n        }else {\r\n            dispatch({\r\n                type:TOKENDATA,\r\n                payload: {}\r\n            })\r\n        }\r\n    };\r\n    \r\n    const handleClickSearch = () => {\r\n        setValues({\r\n            ...values,\r\n            showPassword: !values.showPassword,\r\n        });\r\n    };\r\n    \r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n    \r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n    \r\n    const handleStepChange = (step) => {\r\n        setActiveStep(step);\r\n    };\r\n\r\n    const selectLockAmountMax = () => {\r\n        setLockAmount(userBalance / Math.pow(10, token.decimals));\r\n        setLockAmountMax(true);\r\n    }\r\n    const handleLockAmount = (e) => {\r\n        setLockAmount(parseFloat(e.target.value));\r\n        setLockAmountMax(false);\r\n    }\r\n\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n\r\n    const handleSnackbarClose = () => setSnackbar(false);\r\n    const handleSnackbarOpen = () => setSnackbar(true);\r\n\r\n    const handleDate = (value) => {\r\n        setWithdrawDate(value)\r\n        const currentDate = new Date();\r\n        console.log(value > currentDate)\r\n        if (value > currentDate) setDateUseful(true);\r\n        else setDateUseful(false);\r\n        setWithdrawDate(value);\r\n    }\r\n\r\n    const depositToken = async () => {\r\n        let tokenAmount;\r\n        if (lockAmountMax) tokenAmount = userBalance.toString()\r\n        else tokenAmount = BigInt(lockAmount * Math.pow(10, token.decimals)).toString();\r\n        let unlockDate = withdrawDate;\r\n        let provider = await connector.getProvider()\r\n        deposit(provider, token, tokenAmount, unlockDate, account, network).then(async (status) => {\r\n            const newData = await getData(account);\r\n            dispatch({type:TOKENLISTS, payload: newData});\r\n            setActiveStep(0);\r\n            dispatch({\r\n                type:TOKENDATA,\r\n                payload: {}\r\n            })\r\n            setWithdrawDate(undefined);\r\n            setDateUseful(false);\r\n        })\r\n    }\r\n\r\n    const approveToken = async () => {\r\n        let provider = await connector.getProvider()\r\n        approve(provider, token, account, network).then((status) => {\r\n            if (status) setIsAllowed(2);\r\n        });\r\n    }\r\n\r\n    const showLockup = async (tokenAddress) => {\r\n        props.history.push(`/lockup/${account}/${tokenAddress}`);\r\n    }\r\n\r\n    const networkData= [\r\n        {name:\"Ethereum\", subtitle:\"Choose if your coin is built on ETH\", url:\"/networks/eth.svg\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0x1', chainName:\"Ethereum\", rpcUrls:[\"https://mainnet.infura.io/v3/\"], blockExplorerUrls:['https://etherscan.io'], nativeCurrency: { symbol:'MATIC', decimals: 18} }},\r\n        {name:\"Binance Smart Chain\", subtitle:\"Choose if your coin is built on BSC\", url:\"/networks/bsc.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular BEP-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0x38', chainName:\"Binance Smart Chain\", rpcUrls:[\"https://bsc-dataseed1.ninicoin.io\"], blockExplorerUrls:['https://bscscan.com/'], nativeCurrency: { symbol:'BNB', decimals: 18} }},\r\n        {name:\"Avalanche\", subtitle:\"Choose if your coin is built on AVAX\", url:\"/networks/avalanche.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0xa86a', chainName:\"Avalanche Mainnet\", rpcUrls:[\"https://api.avax.network/ext/bc/C/rpc\"], blockExplorerUrls:['https://snowtrace.io/'], nativeCurrency: { symbol:'AVAX', decimals: 18} }},\r\n        {name:\"Avalanche_testnet\", subtitle:\"Choose if your coin is built on AVAX\", url:\"/networks/avalanche.png\", subData:[{name:\"Project Tokens\", subTitle:\"Regular ERC-20 Project Token\", url:\"/project.png\"}], chainData:{chainId:'0xa869', chainName:\"Avalanche Testnet\", rpcUrls:[\"https://api.avax-test.network/ext/bc/C/rpc\"], blockExplorerUrls:['https://testnet.snowtrace.io/'], nativeCurrency: { symbol:'AVAX', decimals: 18} }},\r\n    ];\r\n\r\n    const changeNetwork = (name) => {\r\n        setNetwork(name);\r\n        dispatch({\r\n            type:TOKENDATA,\r\n            payload: {}\r\n        })\r\n    }\r\n\r\n    const Row = (props) => {\r\n        const { index, row } = props;\r\n        let nextUnlock, lockedTokenAmount = 0, lockedLiquidity = false;\r\n        const currentTime = Date.now();\r\n        row.data.map(each => {\r\n            if (each.timestamp > currentTime / 1000) {\r\n                if (!nextUnlock) nextUnlock = each.timestamp;\r\n                else if (nextUnlock > each.timestamp) nextUnlock = each.timestamp;\r\n            }\r\n            if (!each.isWithdrawn && !each.isLiquidity) lockedTokenAmount += each.amount / Math.pow(10, each.decimals);\r\n            if (!each.isWithdrawn && each.isLiquidity) lockedLiquidity = true;\r\n        })\r\n        // const [open, setOpen] = React.useState(false);\r\n        return (\r\n            <>\r\n                <TableRow\r\n                // sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                sx={{ '& > *': { borderBottom: 'unset' } }}\r\n                > \r\n                    {/* <TableCell>\r\n                        <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                        >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                    </TableCell> */}\r\n                    <TableCell>\r\n                        {index + 1}\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                        <span style={{cursor: \"pointer\"}} onClick={()=>showLockup(row.token.address)}>{row.token.symbol}</span>\r\n                        <CopyToClipboard text={row.token.address} onCopy={()=>handleSnackbarOpen(true)}>\r\n                            <Tooltip title=\"copy\">\r\n                                <IconButton>\r\n                                    <ContentCopyIcon/>\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </CopyToClipboard>\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{lockedTokenAmount.toFixed(2)}</TableCell>\r\n                    <TableCell align=\"right\">{lockedLiquidity && <CheckIcon />}</TableCell>\r\n                    <TableCell align=\"right\">\r\n                        {nextUnlock ? new Date(nextUnlock).toDateString() : ''}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                        <Button variant=\"contained\" color=\"secondary\" style={{width: '100%'}}  onClick={() => showLockup(row.token.address)}>View</Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n                {/* <TableRow>\r\n                    <TableCell colSpan={2}></TableCell>\r\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={4}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                History\r\n                            </Typography>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Withdrawable Date</TableCell>\r\n                                        <TableCell align=\"right\">Amount</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                {row.vesting.map((vestingRow) => (\r\n                                    <TableRow key={vestingRow[0]}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {new Date(vestingRow[0] * 1000).toDateString()}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">{(vestingRow[1] / Math.pow(10, row.decimals)).toFixed(2)}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Box>\r\n                    </Collapse>\r\n                    </TableCell>\r\n                </TableRow> */}\r\n            </>\r\n        )\r\n    }\r\n\r\n    // const onChangeSearchWallet = async (e) => {\r\n    //     setSearchWallet(e.target.value);\r\n    //     let provider = await connector.getProvider()\r\n    //     if (e.target.value === \"\" || checkWalletAddress(provider, e.target.value)) {\r\n    //         setSearchOtherWalletError(false);\r\n    //         setSearchHelperText(\"\");\r\n    //     } else {\r\n    //         setSearchOtherWalletError(true);\r\n    //         setSearchHelperText(\"Invalid wallet address\");\r\n    //     }\r\n    // }\r\n\r\n    // const searchOtherWallet = async (e) => {\r\n    //     console.log(searchOtherWalletError)\r\n    //     if (e.key === \"Enter\" && !searchOtherWalletError) {\r\n    //         let provider = await connector.getProvider()\r\n    //         let wallet = e.target.value;\r\n    //         console.log(wallet)\r\n    //         if (wallet === \"\") {\r\n    //             const newdata = await getData(provider);\r\n    //             setData(newdata);\r\n    //         } else {\r\n    //             const newdata = await getData(provider);   \r\n    //             setData(newdata);\r\n    //             setSearchWallet(\"\");\r\n    //         }\r\n    //     }\r\n    // }\r\n    return (\r\n        <Container className={classes.root} maxWidth=\"lg\" style={{paddingLeft:20, paddingRight:20}}>\r\n            <Box className={classes.info}>\r\n                <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\" >\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid text-center`  : \"grid text-center\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <div style={{maxWidth:400, display:'inline-block', textAlign:'left'}}>\r\n                            <h1>Create your own custom token lock instantly.</h1>\r\n                            <p>All coins are locked into our audited  smart contract and can only be withdrawn  by you after lock time expires.</p>\r\n                            <Link\r\n                                href={`https://app.snow-burn.com`}\r\n                                target=\"_blank\"\r\n                                color=\"blue\"\r\n                                underline=\"none\"\r\n                                className={classes.button}\r\n                            ><Button variant=\"contained\">Powered by SnowBurn</Button></Link>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid`  : \"grid\"} style={{marginTop:40}} item xs={12} sm={12} md={6} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Create New Lock\"\r\n                            />\r\n                            <CardContent >\r\n                                <img src=\"/lock.png\" />\r\n                                <RadioGroup\r\n                                    aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                    defaultValue=\"female\"\r\n                                    name=\"radio-buttons-group\"\r\n                                >\r\n                                    <SwipeableViews\r\n                                        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                                        index={activeStep}\r\n                                        onChangeIndex={handleStepChange}\r\n                                    >\r\n                                       \r\n                                        <div key={1} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Choose the blockchain network.\r\n                                            </p>\r\n                                            {\r\n                                                networkData.map((item)=>\r\n                                                <Grid\r\n                                                    className={classes.networkSelector}\r\n                                                    container\r\n                                                    direction=\"row\"\r\n                                                    justifyContent=\"space-evenly\"\r\n                                                    alignItems=\"center\"\r\n                                                    style={{padding:\"10px 0px\", border:item.name==network?\"1px solid #e55370\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                    key={item.name}\r\n                                                    onClick = {()=>changeNetwork(item.name)}\r\n                                                >\r\n                                                    <Grid item  xs={10} sm={11} md={11}>\r\n                                                        <Grid \r\n                                                            container\r\n                                                            direction=\"row\"\r\n                                                            \r\n                                                            alignItems=\"center\"\r\n                                                        >\r\n                                                            <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                                <img className={dashboardClasses.networkImage} src={item.url} alt=\"network\" />\r\n                                                            </Grid>\r\n                                                            <Grid item   xs={9} sm={10} md={10}>\r\n                                                                <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                    {item.name}\r\n                                                                </p>\r\n                                                                <p color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                    {item.subtitle}\r\n                                                                </p>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                    <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                        {item.name==network ? <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", backgroundColor:'#e55370', display:'inline-block'}} />: <div style={{width:\"20px\", height:'20px', borderRadius:\"10px\", border:'1px solid #e55370', display:'inline-block'}} />}\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                        <div key={2} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p style={{textAlign:'center'}} color=\"textSecondary\">\r\n                                                Select the type of token you would like to create a lock for.\r\n                                                You can create multiple locks with different settings for each one.\r\n                                            </p>\r\n                                            {\r\n                                                network !=\"\" && networkData.find((item)=>item.name==network).subData.map((each)=><Grid\r\n                                                className={classes.networkSelector}\r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-evenly\"\r\n                                                alignItems=\"center\"\r\n                                                style={{padding:\"10px 0px\", border:each.name==subMethod?\"1px solid #e55370\":\"1px solid transparent\", borderRadius:'5px'}}\r\n                                                key={each.name}\r\n                                                onClick = {()=>setSubMethod(each.name)}\r\n                                            >\r\n                                                <Grid item  xs={10} sm={11} md={11}>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className=\"text-center\" xs={3} sm={2} md={2}>\r\n                                                            <img className={dashboardClasses.networkImage} src={each.url} alt=\"network\" />\r\n                                                        </Grid>\r\n                                                        <Grid item   xs={9} sm={10} md={10}>\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.networkTitle}>\r\n                                                                {each.name}\r\n                                                            </p>\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.networkDes}>\r\n                                                                {each.subTitle}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                                <Grid item  className=\"text-center\" xs={2} sm={1} md={1}>\r\n                                                    {each.name==subMethod ? <div className={dashboardClasses.fillCircle} />: <div className={dashboardClasses.emptyCircle} />}\r\n                                                </Grid>\r\n                                            </Grid>)\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={3} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <p className=\"text-center\" color=\"textSecondary\">\r\n                                                Enter the token address you would like to lock for\r\n                                            </p>\r\n                                            <FormControl sx={{ m: 1, width: '25ch' }} variant=\"outlined\" style={{width:'-webkit-fill-available'}}>\r\n                                                <InputLabel htmlFor=\"outlined-adornment-password\">Address</InputLabel>\r\n                                                <OutlinedInput\r\n                                                    id=\"outlined-adornment-password\"\r\n                                                    type=\"text\"\r\n                                                    value={values.tokenAddress}\r\n                                                    onChange={handleChange}\r\n                                                    // onKeyDown={handleChange}\r\n                                                    endAdornment={\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton\r\n                                                        aria-label=\"toggle search\"\r\n                                                        onClick={handleClickSearch}\r\n                                                        onMouseDown={handleMouseDownPassword}\r\n                                                        edge=\"end\"\r\n                                                        >\r\n                                                        <Search />\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                    }\r\n                                                    label=\"Password\"\r\n                                                />\r\n                                            </FormControl>\r\n                                            \r\n                                            {\r\n                                                token != undefined && token.symbol !=undefined && token.symbol !=\"\" &&\r\n                                                <div style={{paddingLeft:20, paddingRight:20}}>\r\n                                                    <p style={{margin:\"0px\"}}>Token Found</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <img className={dashboardClasses.tokenImage} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectToken}>Select</Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </div>\r\n                                            }\r\n                                            \r\n                                        </div>\r\n                                        <div key={4} style={{paddingLeft:1, paddingRight:1}}>\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={dashboardClasses.balanceContainer}\r\n                                            >\r\n                                                <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                    <TextField\r\n                                                        id=\"standard-number\"\r\n                                                        label=\"Lock Amount\"\r\n                                                        type=\"number\"\r\n                                                        InputLabelProps={{\r\n                                                            shrink: true,\r\n                                                            inputprops: { min: 1 }\r\n                                                        }}\r\n                                                        InputProps={{ inputprops: { min: 1 } }}\r\n                                                        variant=\"standard\"\r\n                                                        onChange={handleLockAmount}\r\n                                                        value={lockAmount}\r\n                                                    />\r\n                                                </Grid>\r\n                                                <Grid item className={dashboardClasses.textRight}  xs={6} sm={6} md={6}>\r\n                                                    <p style={{marginBottom:2, marginTop:0, fontSize: \"10px\"}}>Balance: {(userBalance / Math.pow(10, token.decimals)).toFixed(2)}</p>\r\n                                                    <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            <Button variant=\"contained\" color=\"error\" sm={12} onClick={selectLockAmountMax}>Max</Button>\r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight} xs={6} sm={6} md={6}>\r\n                                                            <img style={{height:30}} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                {token.symbol}\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <br />\r\n                                            {/* <div className=\"text-center\" style={{padding:\"10px 0px\"}}>\r\n                                                <LockIcon />\r\n                                            </div> */}\r\n                                            <Grid \r\n                                                container\r\n                                                direction=\"row\"\r\n                                                justifyContent=\"space-between\"\r\n                                                alignItems=\"center\"\r\n                                                className={!isMobile ? `${dashboardClasses.balanceContainer}` : `${mobileClasses.balanceContainer}`}\r\n                                            >\r\n                                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                                        <DateTimePicker\r\n                                                            id=\"standard-number\"\r\n                                                            label=\"Unlock Date\"\r\n                                                            renderInput={(props) => <TextField {...props} className={isMobile ? `${mobileClasses.datetimepicker}` : ``} />}\r\n                                                            // type=\"time\"\r\n                                                            // InputLabelProps={{\r\n                                                            //     shrink: true,\r\n                                                            //     inputprops: { min: 1 }\r\n                                                            // }}\r\n                                                            // InputProps={{ inputprops: { min: 1 } }}\r\n                                                            value={withdrawDate}\r\n                                                            onChange={(value) => handleDate(value)}\r\n                                                            // variant=\"standard\"\r\n                                                        />\r\n                                                    </LocalizationProvider>\r\n                                                    <div>\r\n                                                    {\r\n                                                        isAllowed == 2 ? <Button variant=\"contained\" color=\"secondary\" sm={12} disabled={!dateUseful} onClick={depositToken} className={isMobile ? `${mobileClasses.button}` : ``}>Deposit</Button>\r\n                                                        : (isAllowed == 1 ? <Button variant=\"contained\" color=\"secondary\" sm={12} onClick={approveToken} className={isMobile ? `${mobileClasses.button}` : ``}>Approve</Button> : <Button variant=\"contained\" color=\"secondary\" sm={12} disabled className={isMobile ? `${mobileClasses.button}` : ``}>Checking</Button>)\r\n                                                    }\r\n                                                    </div>\r\n                                                    {/* <Grid \r\n                                                        container\r\n                                                        direction=\"row\"\r\n                                                        justifyContent=\"space-between\"\r\n                                                        alignItems=\"center\"\r\n                                                    >\r\n                                                        <Grid item className={dashboardClasses.textLeft} xs={6} sm={6} md={6}>\r\n                                                            \r\n                                                        </Grid>\r\n                                                        <Grid item className={dashboardClasses.textRight} xs={6} sm={6} md={6}>\r\n                                                            <img style={{height:30}} src=\"/lock.png\" alt=\"network\" />\r\n                                                            <p  color=\"textSecondary\" className={dashboardClasses.tokenTitle}>\r\n                                                                ICC\r\n                                                            </p>\r\n                                                        </Grid>\r\n                                                    </Grid> */}\r\n                                            </Grid>\r\n                                        </div>\r\n                                    </SwipeableViews>\r\n                                    <MobileStepper\r\n                                        className={dashboardClasses.mobileStepper}\r\n                                        steps={maxSteps}\r\n                                        position=\"static\"\r\n                                        activeStep={activeStep}\r\n                                        nextButton={\r\n                                        <Button\r\n                                            size=\"small\"\r\n                                            onClick={handleNext}\r\n                                            disabled={activeStep === maxSteps - 1}\r\n                                        >\r\n                                            Next\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowLeft />\r\n                                            ) : (\r\n                                            <KeyboardArrowRight />\r\n                                            )}\r\n                                        </Button>\r\n                                        }\r\n                                        backButton={\r\n                                        <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n                                            {theme.direction === 'rtl' ? (\r\n                                            <KeyboardArrowRight />\r\n                                            ) : (\r\n                                            <KeyboardArrowLeft />\r\n                                            )}\r\n                                            Back\r\n                                        </Button>\r\n                                        }\r\n                                    />\r\n                                </RadioGroup>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid className={isMobile ? `${mobileClasses.root} grid `  : \"grid\"} style={{marginTop:40}} item xs={12} sm={12} md={12} >\r\n                        <Card className=\"card\">\r\n                            <CardHeader\r\n                                className={dashboardClasses.cardHeader}\r\n                                title=\"Locked Token List\"\r\n                            />\r\n                            <CardContent >\r\n                            {/* <TextField\r\n                                id=\"outlined-search\"\r\n                                label=\"Search other wallet\"\r\n                                type=\"search\"\r\n                                variant=\"standard\"\r\n                                fullWidth={true}\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                onKeyPress={searchOtherWallet}\r\n                                value={searchWallet}\r\n                                onChange={onChangeSearchWallet}\r\n                                error={searchOtherWalletError}\r\n                                helperText={searchHelperText}\r\n                            /> */}\r\n                                {data.length == 0 && \r\n                                <div className=\"text-center\" style={{width:'100%', padding:\"20px 0px\"}}>\r\n                                    <img src=\"/mylock.png\" alt=\"My Lock\" style={{height:200}}/>\r\n                                    <h2 style={{marginBottom:0}}>No Locked Coin</h2>\r\n                                    <p style={{color:'grey',margin:0}}>You have not locked up any coins yet.</p>\r\n                                </div>}\r\n                                {data.length != 0 && <TableContainer component={Paper}>\r\n                                    <Table  aria-label=\"collapsible table\">\r\n                                        <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>No</TableCell>\r\n                                            <TableCell>Token</TableCell>\r\n                                            <TableCell align=\"right\">Tokens Locked</TableCell>\r\n                                            <TableCell align=\"right\">Liquidity Locked</TableCell>\r\n                                            <TableCell align=\"right\">Next Unlock</TableCell>\r\n                                            <TableCell align=\"right\"></TableCell>\r\n                                        </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                        {data.map((row, index) => (\r\n                                            <Row key={`lockToken-${index}`} row={row} index={index} />\r\n                                        ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>}\r\n                            </CardContent>\r\n                        </Card>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    \r\n                    {networkData.find((item)=>item.name==network) && <div style={{textAlign:'center'}}><img style={{width:\"50px\"}} src={networkData.find((item)=>item.name==network).url} alt=\"network\" /></div>}\r\n                    <h3 id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" style={{textAlign:'center', marginTop:0}}>\r\n                        {modalTitle}\r\n                    </h3>\r\n                    <p id=\"modal-modal-description\" sx={{ mt: 2 }} style={{textAlign:'center', fontSize:12, color:'grey'}}>\r\n                        {modalDes}\r\n                    </p>\r\n                    <Button variant=\"contained\" color=\"error\" style={{width:'100%'}} onClick={handleClose}>Close</Button>\r\n                </Box>\r\n            </Modal>\r\n            <Snackbar\r\n                open={snackbar}\r\n                autoHideDuration={600}\r\n                style={{width:100}}\r\n                onClose={handleSnackbarClose}\r\n                message=\"Successfully Copied to Clipboard\"\r\n                // action={action}\r\n            />\r\n        </Container >\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    statistics: state.statistics,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Dashboard);\r\n","import Web3 from \"web3\"\r\nimport {\r\n    Multicall\r\n  } from 'ethereum-multicall';\r\n\r\nimport lockerContractAbi from \"./locker_abi.json\"\r\nimport erc20Abi from \"./erc20_abi.json\"\r\nimport liquidityPoolAbi from \"./liquidityPool_abi.json\"\r\nimport axios from 'axios'\r\nimport { maxTxLimit, lockerAddress, swapTokenLockerFactory, airdropAddress } from './constants'\r\n\r\n\r\nconst provider = {\r\n    \"Ethereum\": \"https://mainnet.infura.io/v3/3587df9c45a740f9812d093074c6a505\",\r\n    \"Binance Smart Chain\": \"https://data-seed-prebsc-1-s1.binance.org:8545\",\r\n    \"Avalanche\": \"https://api.avax.network/ext/bc/C/rpc\",\r\n    \"Avalanche_testnet\": \"https://api.avax-test.network/ext/bc/C/rpc\"\r\n};\r\n\r\nconst serverApi = 'http://localhost:5000/api';\r\n// const serverApi = 'https://localhost:5000/api';\r\n// const serverApi = 'https://app.snowprotocol.io/api';\r\n\r\nexport const explorer = {\r\n    \"Ethereum\": \"https://etherscan.io\",\r\n    \"Binance Smart Chain\": \"https://bscscan.com\",\r\n    \"Avalanche\": \"https://snowtrace.io\",\r\n    \"Avalanche_test\": \"https://testnet.snowtrace.io\"\r\n};\r\n\r\nexport const deposit = async (provider, token, amount, date, account, network) => {\r\n    let unlockDate = new Date(date);\r\n    let UTCTimestamp = Math.round(unlockDate.getTime() / 1000)\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress[network]);\r\n    let feeInETH = await contract.methods.feesInETH().call();\r\n    let result = await contract.methods[\"lockTokens\"](token.address, account, BigInt(amount), UTCTimestamp).send({from: account, value: network === \"Avalanche\" || network === \"Avalanche_testnet\" ? BigInt(feeInETH * Math.pow(10, 18)).toString() : feeInETH});\r\n    return result.status;\r\n}\r\n\r\nexport const withdraw = async (provider, id, account, network) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress[network]);\r\n    let result = await contract.methods[\"withdrawTokens\"](id).send({\r\n        from: account\r\n    });\r\n    return result.status;\r\n}\r\n\r\nexport const approve = async (provider, token, account, network) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"approve\"](lockerAddress[network], web3.utils.toBN(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")).send({from: account});\r\n    return result.status;\r\n}\r\n\r\nexport const approveToken = async (provider, token, account, deployedContract) => {\r\n    let web3 = new Web3(provider);\r\n    let contract = new web3.eth.Contract(erc20Abi, token);\r\n    let result = await contract.methods[\"approve\"](deployedContract, web3.utils.toBN(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\")).send({from: account});\r\n    return result.status;\r\n}\r\n\r\nexport const allowance = async (token, account, network) => {\r\n    let web3 = new Web3(provider[network]);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"allowance\"](account, lockerAddress[network]).call();\r\n    return result;\r\n}\r\n\r\nexport const getTokenBalance = async (token, account, network) => {\r\n    let web3 = new Web3(provider[network]);\r\n    let contract = new web3.eth.Contract(erc20Abi, token.address);\r\n    let result = await contract.methods[\"balanceOf\"](account).call();\r\n    return result;\r\n}\r\n\r\nexport const getRawData = async (account, network) => {\r\n    let web3 = new Web3(provider[network]);\r\n    let contract = new web3.eth.Contract(lockerContractAbi, lockerAddress[network]);\r\n    let depositIds = await contract.methods[\"getAllDepositIds\"]().call();\r\n    if (!depositIds.length) return []\r\n    const multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    let contractCallContext = {\r\n        reference: \"lockedToken\",\r\n        contractAddress: lockerAddress[network],\r\n        abi: lockerContractAbi,\r\n        calls: depositIds.map(each => {\r\n            return { reference: 'lockedTokensCall', methodName: 'lockedToken', methodParameters: [each] }\r\n        })\r\n    }\r\n    let response = await multicall.call(contractCallContext);\r\n    const returnValues = [];\r\n    response.results.lockedToken.callsReturnContext.map(each => {\r\n        const returnValue = {\r\n            id: each.methodParameters[0],\r\n            token: each.returnValues[0],\r\n            owner: each.returnValues[1],\r\n            amount: BigInt(parseInt(each.returnValues[2].hex, 16)).toString(),\r\n            timestamp: parseInt(each.returnValues[3].hex, 16),\r\n            isWithdrawn: each.returnValues[4]\r\n        }\r\n        if (returnValue.owner.toLowerCase() === account.toLowerCase()) returnValues.push(returnValue);\r\n    })\r\n    return returnValues;\r\n\r\n        // let lockedTokenLists = [];\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     lockedTokenLists.push(value.callsReturnContext[0][\"returnValues\"][0]);\r\n        // }\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < length; i++) {\r\n        //     contractCallContext.push({\r\n        //         reference: i,\r\n        //         contractAddress: lockerAddress,\r\n        //         abi: lockerContractAbi,\r\n        //         calls: [{ reference: 'lockedTokensCall', methodName: 'getUserTokenInfo', methodParameters: [lockedTokenLists[i], account] }]\r\n        //     })\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // let userInfo = [];\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     if (web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[2].hex) == '0') continue;\r\n        //     userInfo.push({token: lockedTokenLists[key], deposited: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[0].hex), withdrawed: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[1].hex), vestLength: web3.utils.hexToNumberString(value.callsReturnContext[0].returnValues[2].hex)})\r\n        // }\r\n        // if (!userInfo.length) return [];\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < userInfo.length; i++) {\r\n        //     let context = {\r\n        //         reference: i,\r\n        //         contractAddress: lockerAddress,\r\n        //         abi: lockerContractAbi,\r\n        //         calls: []\r\n        //     }\r\n        //     for (let j = 0; j < userInfo[i][\"vestLength\"]; j++) {\r\n        //         context.calls.push({ reference: 'getUserVestingAtIndexCall', methodName: 'getUserVestingAtIndex', methodParameters: [userInfo[i].token, account, j] });\r\n        //     }\r\n        //     contractCallContext.push(context)\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     userInfo[key][\"vesting\"] = value.callsReturnContext.map(each => {\r\n        //         return each.returnValues.map(data => {\r\n        //             return web3.utils.hexToNumberString(data.hex)\r\n        //         })\r\n        //     })\r\n        // }\r\n        // contractCallContext = [];\r\n        // for (let i = 0; i < userInfo.length; i++) {\r\n        //     let context = {\r\n        //         reference: i,\r\n        //         contractAddress: userInfo[i][\"token\"],\r\n        //         abi: erc20Abi,\r\n        //         calls: [{ reference: 'decimalsCall', methodName: 'decimals' }, { reference: 'symbolCall', methodName: 'symbol'}]\r\n        //     }\r\n        //     contractCallContext.push(context);\r\n        // }\r\n        // response = await multicall.call(contractCallContext);\r\n        // for (const [key, value] of Object.entries(response.results)) {\r\n        //     userInfo[key][\"decimals\"] = value.callsReturnContext[0][\"returnValues\"][0];\r\n        //     userInfo[key][\"symbol\"] = value.callsReturnContext[1][\"returnValues\"][0];\r\n        // }\r\n        // let currentTime = Math.round(Date.now() / 1000);\r\n        // // console.log(userInfo)\r\n        // userInfo = userInfo.map(each => {\r\n        //     console.log(each);\r\n        //     let withdrawable = web3.utils.toBN(0);\r\n        //     each.vesting.map((eachVest) => {\r\n        //         if (Number(eachVest[0]) < currentTime) withdrawable = withdrawable.add(web3.utils.toBN(eachVest[1]));\r\n        //     })\r\n        //     withdrawable = withdrawable.sub(web3.utils.toBN(each.withdrawed));\r\n        //     each.withdrawable = withdrawable.toString();\r\n        //     return each;\r\n        // })\r\n    }\r\n    \r\nexport const getData = async (account, network) => {\r\n    const response = await axios.get(`${serverApi}/locker/lockedtokens/${network}/${account}`);\r\n    const lockerDataByWallet = response.data;\r\n    return lockerDataByWallet;\r\n}\r\n\r\nexport const getLockedTokenDetails = async (tokenAddress, account, network) => {\r\n\r\n    // const tokenData = data.find(each => each.address === tokenAddress);\r\n    \r\n    const rawData = await getRawData(account, network);\r\n    let web3 = new Web3(provider[network]);\r\n\r\n    let tokenLocked = BigInt(0);\r\n    rawData.map(each => {\r\n        if (each.token === tokenAddress && !each.isWithdrawn) tokenLocked = tokenLocked + BigInt(each.amount);\r\n    });\r\n    // console.log(rawData)\r\n    const tokenContract = new web3.eth.Contract(erc20Abi, tokenAddress);\r\n    let symbol = await tokenContract.methods.symbol().call();\r\n    let decimals = await tokenContract.methods.decimals().call();\r\n    let totalSupply = await tokenContract.methods.totalSupply().call();\r\n    let liquidityLocked = BigInt(0);\r\n    let tokenLockHistory = [];\r\n\r\n    const multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    let contractCallContext = rawData.map((each, index) => {\r\n        return {\r\n            reference: index,\r\n            contractAddress: each.token,\r\n            abi: erc20Abi,\r\n            calls: [{ reference: 'symbolsCall', methodName: 'symbol' }]\r\n        }\r\n    })\r\n    let response = await multicall.call(contractCallContext);\r\n    let symbols = [];\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        symbols.push(value.callsReturnContext[0].returnValues[0]);\r\n    }\r\n    // console.log(rawData)\r\n    for (let i = 0; i < rawData.length; i++) {\r\n        let each = rawData[i];\r\n        let address = each.token;\r\n        let ownerAddress = each.owner;\r\n        let tokenAmount = each.amount;\r\n        let timestamp = each.timestamp;\r\n        let isWithdrawn = each.isWithdrawn;\r\n        //default token\r\n        if (address.toLowerCase() === tokenAddress.toLowerCase()) tokenLockHistory.push({id: each.id, address: address, owner: ownerAddress, tokenAmount: tokenAmount, timestamp: timestamp, isWithdrawn: isWithdrawn});\r\n        //pool token\r\n        else if (symbols[i] === 'HUL') {\r\n            let poolContract = new web3.eth.Contract(liquidityPoolAbi, each.token);\r\n            let token0 = await poolContract.methods.token0().call();\r\n            let token1 = await poolContract.methods.token1().call();\r\n            if (token0.toLowerCase() === tokenAddress.toLowerCase() || token1.toLowerCase() === tokenAddress.toLowerCase()) {\r\n                let totalSupply = await poolContract.methods.totalSupply().call();\r\n                let baseTokenTotalAmount = await tokenContract.methods.balanceOf(address).call();\r\n                let baseTokenAmount = BigInt(baseTokenTotalAmount) * BigInt(tokenAmount) / BigInt(totalSupply);\r\n                if (!each.isWithdrawn) liquidityLocked = liquidityLocked + baseTokenAmount;\r\n                tokenLockHistory.push({id: each.id, isPool: true, address: address, owner: ownerAddress, tokenAmount: tokenAmount, baseTokenAmount: baseTokenAmount.toString(), timestamp: timestamp, isWithdrawn: isWithdrawn});\r\n            }\r\n        }\r\n    }\r\n    // let tokenSymbol = await tokenContract.methods.symbol().call();\r\n    // let tokenDecimals = await tokenContract.methods.decimals().call();\r\n    // let tokenLocked = await tokenContract.methods.balanceOf(lockerAddress).call();\r\n    // let tokenTotalSupply = await tokenContract.methods.totalSupply().call();\r\n\r\n    let lockerContract = new web3.eth.Contract(lockerContractAbi, lockerAddress[network]);\r\n    let depositEvents = await lockerContract.getPastEvents(\"LogLocking\", {\r\n        fromBlock: 0\r\n    })\r\n    let withdrawEvents = await lockerContract.getPastEvents(\"LogWithdrawal\", {\r\n        fromBlock: 0\r\n    })\r\n\r\n    // let tokenTransferEvents = await tokenContract.getPastEvents(\"Transfer\",{\r\n    //     fromBlock: 0,\r\n    //     toBlock: \"latest\",\r\n    //     filter: {\r\n    //         to: lockerAddress\r\n    //     }\r\n    // })\r\n    // let tokenTransferTransactions = await Promise.all(tokenTransferEvents.map(each => web3.eth.getTransaction(each.transactionHash)))\r\n    // tokenTransferTransactions = tokenTransferTransactions.filter(each => each.input.length === 266);\r\n    \r\n    \r\n    for(let i=0; i<depositEvents.length; i++) {\r\n        let blockDetail = await web3.eth.getBlock(depositEvents[i].blockNumber);\r\n        depositEvents[i].timestamp = blockDetail.timestamp;\r\n    }\r\n    for(let i=0; i<withdrawEvents.length; i++) {\r\n        let blockDetail = await web3.eth.getBlock(withdrawEvents[i].blockNumber);\r\n        withdrawEvents[i].timestamp = blockDetail.timestamp;\r\n    }\r\n    let events = [], j = 0;\r\n    for(let i=0; i<depositEvents.length;i++) {\r\n        if(withdrawEvents[j] && withdrawEvents[j].returnValues.index === depositEvents[i].returnValues.index) {\r\n            events.push({deposit: depositEvents[i], withdraw: withdrawEvents[j]});\r\n            j++;\r\n        } else {\r\n            events.push({deposit: depositEvents[i]});\r\n        }\r\n    }\r\n\r\n    return {\r\n        address: tokenAddress,\r\n        symbol: symbol,\r\n        decimals: decimals,\r\n        totalSupply: totalSupply,\r\n        liquidityLocked: liquidityLocked,\r\n        tokenLocked: tokenLocked,\r\n        history: tokenLockHistory,\r\n        events: events\r\n    }\r\n}\r\n\r\nexport const checkWalletAddress = (walletAddress, network) => {\r\n    let web3 = new Web3(provider[network]);\r\n    return web3.utils.isAddress(walletAddress);\r\n}\r\n\r\nexport const getLastDeployedContract = async (account, network) => {\r\n    const response = await axios.get(`${serverApi}/vesting/lastDeployed/${network}/${account}`);\r\n    const lastDeployedAddress = response.data;\r\n    return lastDeployedAddress;\r\n}\r\n\r\nexport const deployContract = async (provider, account, token, network) => {\r\n    const web3 = new Web3(provider);\r\n    const abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"createTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]\r\n    const contract = new web3.eth.Contract(abi, swapTokenLockerFactory[network]);\r\n    let result = contract.methods.createTokenLocker(token).send({\r\n        from: account\r\n    })\r\n    return result;\r\n}\r\n\r\nexport const sendTokenVesting = async (provider, deployedContract, csvData, token, account, network) => {\r\n    let _users = [], _amounts = [], _lockHours = [], _sendAmount = BigInt(0);\r\n    const web3 = new Web3(provider);\r\n    let abi = [{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let contract = new web3.eth.Contract(abi, token);\r\n    let decimals = await contract.methods.decimals().call();\r\n    csvData.map(each => {\r\n        _users.push(each.address);\r\n        _amounts.push(BigInt(each.amount * Math.pow(10, decimals)).toString());\r\n        switch(each.period[each.period.length - 1]) {\r\n            case 'M':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 30 * 24);\r\n                break;\r\n            case 'W':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 7 * 24);\r\n                break;\r\n            case 'D':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1) * 24);\r\n                break;\r\n            case 'h':\r\n                _lockHours.push(each.period.slice(0, each.period.length - 1));\r\n                \r\n        }\r\n        _sendAmount += BigInt(each.amount * Math.pow(10, decimals));\r\n    })\r\n    _sendAmount = _sendAmount.toString();\r\n    abi = [{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_lockHours\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"_sendAmount\",\"type\":\"uint256\"}],\"name\":\"sendLockTokenMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    \r\n    contract = new web3.eth.Contract(abi, deployedContract)\r\n    let feesInETH = await contract.methods.feesInETH().call();\r\n    console.log(_users, _amounts, _lockHours, _sendAmount, account)\r\n    let result = await contract.methods.sendLockTokenMany(_users, _amounts, _lockHours, _sendAmount).send({\r\n        from: account,\r\n        value: network === \"Avalanche\" || network === \"Avalanche_testnet\" ? BigInt(feesInETH * Math.pow(10, 18)).toString(): feesInETH\r\n    });\r\n    return result;\r\n}\r\n\r\nexport const getClaimTokenList = async (address, network) => {\r\n    const web3 = new Web3(provider[network]);\r\n    let factoryContract, abi, erc20Abi, allContracts, response, multicall, contractCallContext;\r\n    abi = [{\"inputs\":[],\"name\":\"getAllContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    factoryContract = new web3.eth.Contract(abi, swapTokenLockerFactory[network]);\r\n    allContracts = await factoryContract.methods.getAllContracts().call();\r\n    console.log(allContracts)\r\n    multicall = new Multicall({ web3Instance: web3, tryAggregate: true });\r\n    abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLockData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    erc20Abi = [{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    contractCallContext = allContracts.map((each, index) => {\r\n        return {\r\n            reference: index,\r\n            contractAddress: each,\r\n            abi: abi,\r\n            calls: [\r\n                { reference: 'getLockDataCall', methodName: 'getLockData', methodParameters: [address] },\r\n                { reference: 'getTokenCall', methodName: 'getToken'}\r\n            ]\r\n        }\r\n    })\r\n    response = await multicall.call(contractCallContext);\r\n    let returnData = [];\r\n    contractCallContext = [];\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        let amount = BigInt(value.callsReturnContext[0].returnValues[0].hex).toString();\r\n        let claimedAmount = BigInt(value.callsReturnContext[0].returnValues[1].hex).toString();\r\n        let lockTimestamp = BigInt(value.callsReturnContext[0].returnValues[2].hex).toString();\r\n        let lastUpdated = BigInt(value.callsReturnContext[0].returnValues[3].hex).toString();\r\n        let lockHours = value.callsReturnContext[0].returnValues[4];\r\n        let contract = allContracts[key];\r\n        let token = value.callsReturnContext[1].returnValues[0];\r\n        if (amount !== '0') {\r\n            contractCallContext.push({\r\n                reference: returnData.length,\r\n                contractAddress: token,\r\n                abi: erc20Abi,\r\n                calls: [\r\n                    { reference: 'nameCall', methodName: 'name' },\r\n                    { reference: 'decimalsCall', methodName: 'decimals' },\r\n                    { reference: 'symbolCall', methodName: 'symbol' }\r\n                ]\r\n            })\r\n            returnData.push({\r\n                amount: amount,\r\n                claimedAmount: claimedAmount,\r\n                lockTimestamp: lockTimestamp,\r\n                lastUpdated: lastUpdated,\r\n                lockHours: lockHours,\r\n                contract: contract,\r\n                token: {\r\n                    address: token\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    response = await multicall.call(contractCallContext);\r\n    for (const [key, value] of Object.entries(response.results)) {\r\n        let name = value.callsReturnContext[0].returnValues[0];\r\n        let symbol = value.callsReturnContext[2].returnValues[0];\r\n        let decimals = value.callsReturnContext[1].returnValues[0];\r\n        returnData[key].token.name = name;\r\n        returnData[key].token.symbol = symbol;\r\n        returnData[key].token.decimals = decimals;\r\n    }\r\n    return returnData;\r\n}\r\n\r\nexport const claimToken = async (provider, tokenDetail, account) => {\r\n    let currentTimestamp = Math.floor(Date.now() / 1000);\r\n    if (currentTimestamp - tokenDetail.lastUpdated < 3600) return {state: false, reason: 'Wait to next claim available'};\r\n    const passedHours = Math.floor((currentTimestamp - tokenDetail.lockTimestamp) / 3600);\r\n    let availableAmount = BigInt(Math.floor(tokenDetail.amount * passedHours / tokenDetail.lockHours) - tokenDetail.claimedAmount).toString();\r\n    if (Number(availableAmount) > maxTxLimit) availableAmount = maxTxLimit.toString();\r\n    const web3 = new Web3(provider);\r\n    const abi = [{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n    const contract = new web3.eth.Contract(abi, tokenDetail.contract);\r\n    const response = await contract.methods.claimToken(availableAmount).send({\r\n        from: account\r\n    });\r\n    console.log(response);\r\n}\r\n\r\nexport const airdrop = async (provider, csvData, token, account, network) => {\r\n    let _users = [], _amounts = [];\r\n    const web3 = new Web3(provider);\r\n    let abi = [{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    // console.log(token)\r\n    let contract = new web3.eth.Contract(abi, token);\r\n    let decimals = await contract.methods.decimals().call();\r\n    csvData.map(each => {\r\n        _users.push(web3.utils.toChecksumAddress(each.address));\r\n        _amounts.push(BigInt(each.amount * Math.pow(10, decimals)).toString());\r\n    })\r\n    // console.log(_users)\r\n    // console.log(_amounts)\r\n    abi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_amounts\",\"type\":\"uint128[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyWallet\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n    contract = new web3.eth.Contract(abi, airdropAddress[network]);\r\n    let feeInETH = await contract.methods.feesInETH().call();\r\n    let result = await contract.methods.airdrop(token, _users, _amounts).send({\r\n        from: account,\r\n        value: network === \"Avalanche\" || network === \"Avalanche_testnet\" ? BigInt(feeInETH * Math.pow(10, 18)).toString() : feeInETH\r\n    });\r\n    return result;\r\n}","import axios from 'axios';\r\nimport { walletAddress } from './redux/reducers';\r\n\r\nconst apiKey = 'SvMhtTsmQ239NmpwWjnnLWXtag5Jt8wYp7NF8F3Tear1QSaDRl9gnM34JZVXdLFV';\r\nconst apiConfig = {\r\n    headers: {\r\n        'x-api-key': apiKey\r\n    }\r\n}\r\nconst serverUrl = 'https://deep-index.moralis.io/api/v2';\r\n\r\nexport const getTokenPrice = async function (_chain, _tokenAddress) {\r\n    let price;\r\n    try {\r\n        price = await axios.get(`${serverUrl}/erc20/${_tokenAddress}/price?chain=${_chain}`, apiConfig);\r\n    } catch (e) {\r\n        price = 0;\r\n    }\r\n    return price && price.data;\r\n}\r\n\r\nexport const getTokenMetadata = async function (_chain, _tokenAddress) {\r\n    const tokenMetadata = await axios.get(`${serverUrl}/erc20/metadata?chain=${_chain}&addresses=${_tokenAddress}`, apiConfig);\r\n    return tokenMetadata.data;\r\n}\r\n\r\nexport const getTokenBalance = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const balances = await axios.get(`${serverUrl}/${_walletAddress}/erc20?chain=${_chain}&token_addresses=${_tokenAddress}`, apiConfig);\r\n    return balances.data;\r\n}\r\n\r\nexport const runContractFunction = async function (_chain, _contractAddress, _functionName, _abi, _params) {\r\n    let result;\r\n    try {\r\n        result = await axios.post(`${serverUrl}/${_contractAddress}/function?chain=${_chain}&function_name=${_functionName}`, {\r\n            \"abi\": _abi,\r\n            \"params\": _params\r\n        }, apiConfig);\r\n    } catch (e) {\r\n        result = null;\r\n    }\r\n    return result ? result.data : result;\r\n}\r\n\r\nexport const getCurrentFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const dynamicFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getDynamicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) return 0;\r\n    const dynamicFee = await runContractFunction(_chain, _tokenAddress, 'getDynamicFee', dynamicFeeAbi, {from:_walletAddress});\r\n    return dynamicFee;\r\n}\r\n\r\nexport const isExcludedFromFee = async function (_chain, _tokenAddress, _walletAddress) {\r\n    const isExcludedFromFeeAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    return await runContractFunction(_chain, _tokenAddress, 'isExcludedFromFee', isExcludedFromFeeAbi, {account:_walletAddress});\r\n}\r\n\r\nexport const getCommonFee = async function (_chain, _tokenAddress) {\r\n    const liquidityAndMarketingFeeAbi = [{\"inputs\":[],\"name\":\"_liquidityAndMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const taxFeeAbi = [{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    let commonFee = 0;\r\n    await Promise.all([\r\n        runContractFunction(_chain, _tokenAddress, '_liquidityAndMarketingFee', liquidityAndMarketingFeeAbi, {}),\r\n        runContractFunction(_chain, _tokenAddress, '_taxFee', taxFeeAbi, {})\r\n    ]).then(results => results.map(each => commonFee += Number(each)));\r\n    return commonFee;\r\n}\r\n\r\nexport const burntAndLeftTokenPercent = async function (_chain, _tokenAddress) {\r\n    const burntVsCirculatingSupplyAbi = [{\"inputs\":[],\"name\":\"burntVsCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"burnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circulating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'burntVsCirculatingSupply', burntVsCirculatingSupplyAbi);\r\n    return {burnt: Number(data[0]), left: Number(data[1]), leftPercent: data[1] / (Number(data[0]) + Number(data[1])) * 100};\r\n}\r\n\r\nexport const totalFees = async function (_chain, _tokenAddress) {\r\n    const totalFeesAbi = [{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}];\r\n    const data = await runContractFunction(_chain, _tokenAddress, 'totalFees', totalFeesAbi);\r\n    return data;\r\n}\r\n\r\nexport const getTransactions = async function (_chain, _walletAddress) {\r\n    const transactions = await axios.get(`${serverUrl}/${_walletAddress}/erc20/transfers?chain=${_chain}&offset=0&oder=desc`, apiConfig);\r\n    return transactions.data;\r\n}\r\n\r\nexport const getLogsByAddress = async function (_chain, _tokenAddress) {\r\n    let offset = 0;\r\n    const response = await axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig);\r\n    let logs = response.data.result;\r\n    const total = response.data.total;\r\n    const pages = Math.ceil(total / 500);\r\n    let page = 1;\r\n    let getLogFunctions = [];\r\n    while (page < pages) {\r\n        offset = page * 500;\r\n        getLogFunctions.push(axios.get(`${serverUrl}/${_tokenAddress}/logs?chain=${_chain}&topic0=0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&offset=${offset}&oder=desc`, apiConfig));\r\n        page++;\r\n    }\r\n    if (getLogFunctions.length) {\r\n        await Promise.all(getLogFunctions).then(results => {\r\n            results.map(each => {\r\n                logs = logs.concat(each.data.result);\r\n            })\r\n        })\r\n    }\r\n    return logs;\r\n}\r\n\r\nfunction getAddress(topic) {\r\n    if (topic === null || topic === '') return '';\r\n    return `0x${topic.substring(topic.length - 40)}`;\r\n}\r\n\r\nfunction filterLogs (logs, _walletAddress) {\r\n    return logs.filter(each => getAddress(each.topic1) === _walletAddress.toLowerCase() || getAddress(each.topic2) === _walletAddress.toLowerCase());\r\n}\r\n\r\nfunction getValue(topic) {\r\n    return parseInt(topic, 16);\r\n}\r\n\r\nasync function calculateBuySell(logs, _chain, _tokenAddress, _walletAddress) {\r\n    let buy = 0, sell = 0, isFee = true;\r\n    if (await isExcludedFromFee(_chain, _tokenAddress, _walletAddress)) isFee = false;\r\n    logs.map(each => {\r\n        if (getAddress(each.topic1) === _walletAddress.toLowerCase()) {\r\n            if (isFee) {\r\n                sell += getValue(each.data) / 97 * 100;\r\n            } else {\r\n                sell += getValue(each.data);\r\n            }\r\n        } else buy += getValue(each.data);\r\n    })\r\n    let result = {buy: buy, sell: sell};\r\n    return result;\r\n}\r\n\r\nexport const walletExchange = async function(_chain, _tokenAddress, _walletAddress) {\r\n    let logs;\r\n    await getLogsByAddress(_chain, _tokenAddress).then(data=> {\r\n        logs = filterLogs(data, _walletAddress);\r\n    })\r\n    return await calculateBuySell(logs, _chain, _tokenAddress, _walletAddress);\r\n}"],"sourceRoot":""}